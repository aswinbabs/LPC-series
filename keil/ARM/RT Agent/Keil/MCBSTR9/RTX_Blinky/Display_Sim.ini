define unsigned char SD_oldPORT;
define unsigned char SD_cursor;


MAP 0x10000000, 0x1000FFFF READ WRITE             // This line maps the user memory.  
                                                  // Use the memory watch window with 0x10000000 to show it

/*
 * This function simulates the 'Clear Display' command
 */
func void SD_clear (void)  {
  unsigned char i;
  for (i = 0; i < 0x80; i++)  {
   _WBYTE (0x10000000+i, 0x20);                    // Write blanks to the whole user memory ( display memory )
  }
  SD_cursor = 0;                                   // Sets the cursor to the origin
}


func void Simulate_Display (void)  {

// read from LCD display	      
  if (!(SD_oldPORT & 0x04) && (PORT9 & 0x04))  {   // The memory read has to shortly after E changes to high
    if ((PORT9 & 0x03) == 0x02)  {                 // read flag register
      PORT8 = (SD_cursor & 0x7F);                  // returns DD RAM pointer to port 0 of the 8051
    }
  }

// write to LCD display
  if ((SD_oldPORT & 0x01) && !(PORT9 & 0x01))  {   // The memory read has to shortly after E changes to high
    if ((PORT9 & 0x06) == 0)  {                    // write to command register
      if (PORT8 == 0x01)  {                        // command is 'Clear Display'
        SD_clear ();                               // call the 'Clear Display' simulation 
      }
      if (PORT8 & 0x80)  {                         // command is 'Set DDRAM address' (  = cursor position )
        SD_cursor = (PORT8 & 0x7F);                // set DD RAM pointer 
      }
    }

    if ((PORT9 & 0x06) == 0x04)  {                 // command is 'Write to RAM' 
     _WBYTE (0x10000000+SD_cursor, PORT8);         // write to Display RAM 
      SD_cursor++;                                 // Advance cursor position by 1
    }

    if (PORT9 & 0x02)  {                           // read mode
      PORT8 = 0x7F;                                // display data goes to high, except status
    }
  }  
  SD_oldPORT = PORT9;                             // store the value of E in temporary buffer for change detection
}

BS WRITE PORT9, 1, "Simulate_Display ()"

/*----------------------------------------------------------------------------*/
/* Analog0() simulates analog input values given to channel-0 (AIN0)          */
/*----------------------------------------------------------------------------*/

Signal void analog0 (float limit)  {
  float volts;

  /* printf ("Analog0 (%f) entered.\n", limit);  */
  while (1)  {          /* forever */
    volts = 0;
    while (volts <= limit)  {
      adc0 = volts;     /* analog input-0 */
      swatch (0.01);    /* 0.01 sec Time-Break */
      volts += 0.05;    /* increase voltage */
    }
    volts = limit;
    while (volts >= 0.0)  {
      adc0 = volts;
      swatch (0.01);    /* 0.01 sec Time-Break */
      volts -= 0.05;    /* decrease voltage */
    }
  }
}

define button "Analog sweep 0 ..3.3V",  "analog0 (3.3)"
define button "Analog sweep STOP",       "signal kill analog0"



Simulate_Display();