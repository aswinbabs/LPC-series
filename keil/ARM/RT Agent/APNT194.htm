<html>

<head>
<title>Application Note 194: Using the Real-Time Agent</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<style>
<!--
/*-----------------------------------------------------------
Keil Software CHM Style Sheet
-----------------------------------------------------------*/
body         { color: #000000; background-color: #FFFFFF; font-size: 75%; font-family: 
               Verdana, Arial, 'Sans Serif' }
a:link       { color: #0000FF; text-decoration: underline }
a:visited    { color: #0000FF; text-decoration: underline }
a:active     { color: #FF0000; text-decoration: underline }
a:hover      { color: #FF0000; text-decoration: underline }
h1           { font-family: Verdana; font-size: 18pt; color: #000080; font-weight: bold; 
               text-align: Center; margin-right: 3 }
h2           { font-family: Verdana; font-size: 14pt; color: #000080; font-weight: bold; 
               background-color: #CCCCCC; margin-top: 24; margin-bottom: 3; 
               padding: 6 }
h3           { font-family: Verdana; font-size: 10pt; font-weight: bold; background-color: 
               #CCCCCC; margin-top: 24; margin-bottom: 3; padding: 6 }
pre          { font-family: Courier New; font-size: 10pt; background-color: #CCFFCC; 
               margin-left: 24; margin-right: 24 }
ul           { list-style-type: square; margin-top: 6pt; margin-bottom: 0 }
ol           { margin-top: 6pt; margin-bottom: 0 }
li           { clear: both; margin-bottom: 6pt }
table        { font-size: 100%; border-width: 0; padding: 0 }
th           { color: #FFFFFF; background-color: #000080; text-align: left; vertical-align: 
               bottom; padding-right: 6pt }
tr           { text-align: left; vertical-align: top }
td           { text-align: left; vertical-align: top; padding-right: 6pt }
.ToolT       { font-size: 8pt; color: #808080 }
.TinyT       { font-size: 8pt; text-align: Center }
code         { color: #000000; background-color: #E0E0E0; font-family: 'Courier New', Courier; 
               line-height: 120%; font-style: normal }
important   {font-size: 10pt; color: #000000; background-color: #F1EA15;}
/*-----------------------------------------------------------
Notes
-----------------------------------------------------------*/
p.note       { font-weight: bold; clear: both; margin-bottom: 3pt; padding-top: 6pt }
/*-----------------------------------------------------------
Expanding/Contracting Divisions
-----------------------------------------------------------*/
#expand      { text-decoration: none; margin-bottom: 3pt }
img.expand   { border-style: none; border-width: medium }
div.expand   { display: none; margin-left: 9pt; margin-top: 0 }
/*-----------------------------------------------------------
Where List Tags
-----------------------------------------------------------*/
p.wh         { font-weight: bold; clear: both; margin-top: 6pt; margin-bottom: 3pt }
table.wh     { width: 100% }
td.whItem    { white-space: nowrap; font-style: italic; padding-right: 6pt; padding-bottom: 
               6pt }
td.whDesc    { padding-bottom: 6pt }
/*-----------------------------------------------------------
Keil Table Tags
-----------------------------------------------------------*/
table.kt     { border: 1pt solid #000000 }
th.kt        { white-space: nowrap; border-bottom: 1pt solid #000000; padding-left: 6pt; 
               padding-right: 6pt; padding-top: 4pt; padding-bottom: 4pt }
tr.kt        {  }
td.kt        { color: #000000; background-color: #E0E0E0; border-top: 1pt solid #A0A0A0; 
               padding-left: 6pt; padding-right: 6pt; padding-top: 2pt; 
               padding-bottom: 2pt }
/*-----------------------------------------------------------
-----------------------------------------------------------*/
-->

</style>
</head>

<body>

<h1>Application Note 194<br>
Using the Real-Time Agent</h1>

<p align="center">Revision 1.4 - June 2007</p>

<p align="center">This Application Note explains how to configure and work with 
the Real-Time Agent that is available with the ULINK2 USB-JTAG Adapter and the 
RealView Microcontroller Development Kit.</p>

<p class="TinyT">Information in this file, the accompany manuals, and software is<br>
Copyright © KEIL - An ARM Company.<br>All rights reserved.</p>

<p class="TinyT">&nbsp;</p>

<hr>

<h2>Revision History</h2>
<ul>
	<li>Revision 1.1 - January 2007: Initial Revision</li>
<li>Revision 1.2 - March 2007: Added polled mode information to Application 
Configuration section / 
Added Extended API information to Programmer Interface (API) section</li>
	<li>Revision 1.3 - May 2007: Added Upgrading the Real-Time Agent section / Updated 
	Custom Interrupt Controllers section with default interrupt macros / Updated Real-Time Agent template and file paths 
	for new locations</li>
	<li>Revision 1.4 - June 2007: Updated for Real-Time Agent v2.4 / Added Quick Start Guide</li>  
</ul>

<hr>

<h2>Contents</h2>

<ol>
  <li class="LI2"><a href="#Overview">Overview</a></li>
  <li class="LI2"><a href="#QuickStart">Quick Start Guide</a></li>  
  <li class="LI2"><a href="#DD">Application Configuration</a></li>
	<li class="LI2"><a href="#API">Programmer Interface (API)</a></li>
  <li class="LI2"><a href="#Examples">Example Programs</a></li>
	<li class="LI2"><a href="#HW">Custom Interrupt Controllers</a></li>
	<li class="LI2"><a href="#Upgrade">Upgrading the Real-Time Agent</a></li>
  <li class="LI2"><a href="#TechnicalSupport">Technical Support</a></li>
  <li class="LI2"><a href="#ContactDetails">Contact Details</a></li>
</ol>

<p>&nbsp;</p>

<table id="tableImpNotice" border="0" cellpadding="4" cellspacing="4" width="100%">
<tr>
<td>
<important><b><u>IMPORTANT NOTICE FOR RTX KERNEL AND RL-ARM USERS</u></b></important>
</td>
</tr>
<tr>
<td>
Integration of the Real-Time Agent with the RTX Kernel and RL-ARM is preliminary in <b>RealView MDK 3.10</b>. As such, the 
   <b>RTX_Config.c</b> templates in <b>&lt;KEIL installation directory&gt;\ARM\Startup</b> have not been updated with the required changes for the <b>Real-Time Agent</b>. 
   If you wish to use the <b>Real-Time Agent</b> with RTX Kernel and RL-ARM, please use an <b>RTX_Config.c</b> file taken from the example projects in <b>&lt;KEIL installation directory&gt;\ARM\RT Agent</b>
   , or merge the changes from one of these files into your <b>RTX_Config.c</b>.
</td>
</tr>
</table>

<p>&nbsp;</p>
<h2><a name="Overview"></a>Overview</h2>

<p>The <b>Real-Time Agent</b> extends the <b>ULINK2</b> USB-JTAG Adapter with the following 
features:</p>

<ul>
  <li>Read and write memory during program execution. The <b>
	<a target="_blank" href="http://www.keil.com/support/man/docs/uv3/uv3_db_dbg_memwin.htm">
	Memory Window</a></b> and <b>
	<a target="_blank" href="http://www.keil.com/support/man/docs/uv3/uv3_db_dbg_watchwin.htm">
	Watch Window</a></b> display application data while the program is executing, 
	and if<b> View – Periodic Window Update</b> is enabled, these windows refresh 
	automatically.</li>
	<li>Terminal emulation via the <b>ULINK2</b> for user I/O. Either STDIO (printf, scanf, etc) 
  can be routed to the <b>Real-Time Agent Terminal Window</b>, or the debug I/O functions (RTA_printf, RTA_scanf) can be used.</li>
  <li>Task switch monitoring when used with the <b>
  <a target="_blank" href="http://www.keil.com/rl-arm/kernel.asp">RTX kernel</a></b>.</li>
</ul>

<p>The <b>Real-Time Agent</b> is implemented in a compact C source file that is added to the user 
application. It complies to less than 1.5kB, and is optimized to be as resource 
light as possible.</p>

<p>&nbsp;</p>
<h2><a name="QuickStart"></a>Quick Start Guide</h2>

<h3>Project with RTX Kernel or RL-ARM Library</h3>
<ul>
  <li>If you created your project with an earlier version of <b>RealView MDK</b> than <b>3.10</b>, replace your <b>RTX_Config.c</b> file with a new one from
      <b>&lt;KEIL installation directory&gt;\ARM\Startup</b>, merging in any changes you have made.
	<li>Open your <b>RTX_Config.c</b> file, select the <b>Configuration Wizard</b> tab and tick the <b>Real-Time Agent</b> option.</li>
	<li>Recompile your project.</li>
</ul>

<h3>Project without RTX Kernel or RL-ARM Library</h3>
<ul>
	<li>Add a copy of <b>RTA_Config.c</b> from <b>&lt;KEIL installation directory&gt;\ARM\RT Agent\Template\</b>, to your project.</li>
  <li>Select the <b>Configuration Wizard</b> tab of this file and and tick the <b>Real-Time Agent</b> option, and select your hardware in the <b>Hardware Type</b> option.</li>
	<li>Recompile your project.</li>
</ul>

<p>&nbsp;</p>
<h2><a name="DD"></a>Application Configuration</h2>

<p>The following steps describe how to add the <b>Real-Time Agent</b> to a user 
application. If you are using RTX or RL-ARM there is no need to copy or add files to your project, just skip straight to the <a href="#DD">Configure</a> section.</p>
<h3>Copy the configuration template file to your project</h3>
<ul>
	<li>Copy <b>&lt;KEIL installation directory&gt;\ARM\RT Agent\Template\RTA_Config.c</b> 
	to your project directory.</li>
</ul>
<h3>Add the configuration file to your project</h3>
<ul>
	<li>Create a new <b>Group</b> for the files in your <b>Project Workspace</b> 
	called 'Real-Time Agent'.</li>
	<li>Add the file <b>RTA_Config.c</b> to this <b>Group</b>.</li>
	<li>Right click the new <b>Group</b> and select <b>'Options for Group 
	'Real-Time Agent'</b>. Under the <b>C/C++</b> tab, select <b>Optimization Level 3</b>.</li>
</ul>


<h3>Configure</h3>
<p>The <b>Real-Time Agent</b> contains a <b>
<a target="_blank" href="http://www.keil.com/support/man/docs/uv3/uv3_ut_configwizard.htm">
Configuration Wizard</a> </b>to make it easy to compile with different features 
and for different hardware platforms. The <b>Configuration Wizard</b> is 
accessed by opening the <b>RTA_Config.c</b> file (or <b>RTX_Config.c</b> in the case of RTX or RL-ARM) in <b>µVision</b> and 
clicking the <b>Configuration Wizard</b> tab. It provides the following options:</p>

<table class="kt" id="table7" border="0" cellpadding="0" cellspacing="0" width="100%">
	<tr>
		<th class="kt">Option</th>
		<th class="kt">Description</th>
	</tr>
	<tr>
		<td class="kt"><b>Real-Time Agent</b></td>
		<td class="kt">Enables or disables the <b>Real-Time Agent</b>. If it is 
		disabled, calls to it's functions are replaced by NOPs using the <b>ARM RealView</b> linker __weak link functionality.</td>
	</tr>
	<tr>
		<td class="kt"><b>Hardware Type (RTA_Config.c)</b></td>
		<td class="kt">Select the type of hardware that you are using. This option is necessary for non RTX or RL-ARM projects.
		<p>If your hardware is not available, you have two options:</p>
		<ul>
			<li>If the ARM Debug Communication Channel interrupts are connected to your target device's interrupt controller, you can implement your own hardware macros (<a href="#HW">Custom Interrupt Controllers</a>)</li>
			<li>If the ARM Debug Communication Channel interrupts are not 
			connected to your target device's interrupt controller, you can use the
			<b>Real-Time Agent</b> in polled mode.</li>
		</ul>    
		</td>
	</tr>
	<tr>
		<td class="kt"><b>Output Buffer Size (bytes)</b></td>
		<td class="kt">Size of the buffer used for <b>Real-Time Agent </b>data 
		travelling from target to host. Increase this for slower JTAG 
		connections, or if data is being lost due to buffer overruns in the target.</td>
	</tr>
	<tr>
		<td class="kt"><b>Invalid Memory Pattern</b></td>
		<td class="kt">Sets the memory pattern that is returned to <b>µVision</b> 
		when accessing invalid memory locations.</td>
	</tr>
	<tr>
		<td class="kt"><b>Enable Real-Time Agent Terminal</b></td>
		<td class="kt">Enables or disables the <b>Real-Time Agent</b> terminal emulation. Disabling 
		saves code and memory space when terminal emulation is not required.</td>
	</tr>
	<tr>
		<td class="kt"><b>Echo Characters Automatically</b></td>
		<td class="kt">If enabled, characters typed in the <b>Real-Time Agent Terminal Window</b> in <b>
		µVision </b>are automatically echoed back. This is needed when using 
		standard library functions such as scanf().</td>
	</tr>
	<tr>
		<td class="kt"><b>Block on Write</b></td>
		<td class="kt">If enabled, calling RTA_TermPutChar() will block if there 
		is insufficient buffer space to send the character immediately, 
		therefore terminal data will not be lost. If disabled, data will be 
		discarded when calling RTA_TermPutChar() if there is insufficient buffer 
		space, providing better real-time performance on the target. If terminal 
		data is being lost when Block on write is disabled, increasing the 
		Output Buffer Size may solve the problem.</td>
	</tr>
	<tr>
		<td class="kt"><b>Task Switch Monitoring (RTX_Config.c)</b></td>
		<td class="kt">Enables or disables RTX Kernel task switch monitoring. 
    <p>NOTE: This option is only available for RTX or RL-ARM projects.</p></td>
	</tr>  
	<tr>
		<td class="kt"><b>I/O Retargeting</b></td>
		<td class="kt">Enables or disables I/O retargeting. 
		If it is disabled, calls to printf(), scanf(), etc. are handled using 
		the default semihosting method, rather than I/O retargeting.</td>
	</tr>
	<tr>
		<td class="kt"><b>STDIO Routing</b></td>
		<td class="kt">Select the routing of the STDIN, STDOUT and STDERR streams (ie printf(), scanf(), etc).</td>
	</tr>
	<tr>
		<td class="kt"><b>External file 
		operations defined</b></td>
		<td class="kt">If implementing a file system, you may 
		want to use I/O retargeting to access that file system. In this case, 
		implement the functions <b>__fopen, __fclose, __write, __flushbuf, 
		__read, __setfpos, __get_flen</b>, and enable this option. An example of 
		this usage of I/O retargeting can be found in <b>&lt;KEIL installation 
		directory&gt;\ARM\RTL\FlashFS\Examples\File_ex1</b>.<p>
		<b>Note: </b>linking 
		will fail if this option is enabled and the above functions are not defined. 
		</td>
	</tr> 
</table>

<p>NOTE: The 'COM Port 1' stream option in <b>STDIO Routing</b> expects the following functions to be defined in your code:</p>
<ul>
	<li>int sendchar (int ch): Write a character 
	to the serial port.</li>
<li>int getkey (void): Get a character from the 
serial port (blocking).</li>
</ul>
<p>An example implementation of these functions for the Keil MCB21XX development 
boards can be found in <b>&lt;KEIL installation directory&gt;\ARM\RT Agent\MCB21xx\Measure\serial.c</b>.</p>
<p>NOTE: <b>I/O Retargeting</b> requires a small amount of heap memory on the target 
(approximately 256 bytes), 
	make sure enough heap is allocated in <b>Startup.s</b> for standard 
	library use.</p>

<h3>Modify your project files</h3>
<p><u><b>Startup.s</b></u></p>
<ul>
	<li>Comment out the default DAbt Handler.</li>
	<li>Add an EXTERN for the DAbt Handler.</li>
</ul>
<p>An example of the changes is shown below:</p>
<pre>;/*****************************************************************************/
;/* STARTUP.S: Startup file                                                   */
;/*****************************************************************************/

...

                EXTERN  DAbt_Handler

Undef_Handler   B       Undef_Handler
SWI_Handler     B       SWI_Handler
PAbt_Handler    B       PAbt_Handler
;DAbt_Handler    B       DAbt_Handler
IRQ_Handler     B       IRQ_Handler
FIQ_Handler     B       FIQ_Handler 

...</pre>

<p><u><b>main()&nbsp; Function</b></u></p>
<p>Add a call to <b>RTA_Init()</b> at the start of your main() function. This 
should be before any code other than essential device initialisation.</p>
<p>NOTE: This is not required if you are using RTX or RL-ARM.</p>
<p><u><b>Polled Mode</b></u></p>
<p>There are two situations where you may want to use the <b>Real-Time Agent </b>in polled mode:</p>
<ul>
	<li>The target hardware does not support interrupt driven mode.</li>
<li>Very fine control of real-time performance of the target is required.</li>
</ul>
<p>To enable polled mode, select <b>'Polled Mode' </b>for <b>Hardware Type</b> 
in the Configuration Wizard. In polled mode, you decide when to send and receive 
data via the <b>Real-Time Agent</b>. In some real-time critical applications, this can be useful because 
it provides more deterministic performance; you only give CPU time to the 
Real-Time Agent when you can. </p>
<p>For the <b>Real-Time Agent</b> to operate in polled mode, you must: 
 </p>
<ul>
	<li>Periodically call the <b>RTA_tx_word_ext()</b> and <b>RTA_rx_word_ext()</b> 
functions from a regular timer interrupt in your application code.</li>
<li>Implement the <b>void RTA_irq_enable_ext(void)</b> and <b>void RTA_irq_disable_ext(void)</b>
functions. These functions should disable and enable the timer interrupt set up
in the step above.</li>
</ul>
<p>To achieve the maximum data rate possible, call these functions once every 
250&#956;s. Calling the functions less often may result in data loss in the form of 
transmit buffer overruns in the target (<b>&#956;Vision</b> will notify you in the <b>
Real-Time Agent</b> area of the status bar if data is being lost). 
Calling the functions more often will not cause harm, but will not increase the 
data rate either.</p>
<p>A pseudo-code example of the Polled Mode changes is shown below:</p>
<p><pre>void __irq periodic_timer(void) {
   /* Perform periodic tasks   */

   /* User tasks */
   UserTask1();
   UserTask2();
   ...
   
   /* Transfer Real-Time Agent data */
   RTA_rx_word_ext();
   RTA_tx_word_ext();
}

void RTA_irq_enable_ext(void) {
   ENABLE_PERIODIC_TIMER_IRQ();
}

void RTA_irq_disable_ext(void) {
   DISABLE_PERIODIC_TIMER_IRQ();
}</pre></p>


<p><u><b>ATMEL AT91SAM7Sx System Interrupt Configuration (ATMEL AT91SAM7Sx MCUs only)</b></u></p>
<p>In AT91SAM7Sx microcontrollers, the COMMRX and COMMTX interrupts (ARM DCC 
interrupts used by the
<b>Real-Time 
Agent</b>) are OR'd with other system interrupts to produce a single input to the 
System Interrupt (interrupt source 1 on the Advanced Interrupt Controller (AIC)). 
This means the <b>Real-Time Agent</b> code cannot deal with these interrupts 
internally, and the user is required to implement calls to the <b>Real-Time Agent</b> 
interrupt handlers from within their System Interrupt handler.</p>
<p>Also, the System Interrupt must be configured as level triggered, because an 
edge triggered interrupt will cause interrupts to be missed. If edge triggered, 
an interrupt would be missed when one source triggers the System Interrupt, and 
between this time and when the interrupt is acknowledged, another source 
triggers - in this case the edge will be missed.</p>
<p>An example of the System Interrupt configured with the <b>Real-Time Agent</b> and 
Periodic Interval Timer (PIT) is shown below:</p>
<pre>#include "RT_Agent.h" 

__irq void system_int (void) {              /* System Interrupt Handler */
  volatile AT91S_PITC * pPIT = AT91C_BASE_PITC;
    
  // Process COMMRX interrupt if any (Real-Time Agent) 
  if (*AT91C_DBGU_CSR & *AT91C_DBGU_IMR & AT91C_US_COMM_RX) {
    RTA_rx_word_ext();
  }

  // Process COMMTX interrupt if any (Real-Time Agent)
  if (*AT91C_DBGU_CSR & *AT91C_DBGU_IMR & AT91C_US_COMM_TX) {
    RTA_tx_word_ext();
  }
  
  // Process PIT interrupt if any
  if (pPIT->PITC_PISR & AT91C_PITC_PITS) {  /* Check PIT Interrupt */
  
    /* Perform timer related task interrupt task */
    
    pPIT->PITC_PIVR;                        /* Ack PIT Interrupt */
  }

  *AT91C_AIC_EOICR = 0;                     /* Signal end-of-interrupt to the AIC */
}

void init_system_int (void) {               /* Setup System Interrupt */
  AT91S_AIC * pAIC = AT91C_BASE_AIC;

  pAIC->AIC_SMR[AT91C_ID_SYS] = AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE | 7;
  pAIC->AIC_SVR[AT91C_ID_SYS] = (unsigned long) system_int;
  pAIC->AIC_IECR = (1 << AT91C_ID_SYS);


  *AT91C_PITC_PIMR = AT91C_PITC_PITIEN |    /* PIT Interrupt Enable */
                     AT91C_PITC_PITEN  |    /* PIT Enable */
                     PIV;                   /* Periodic Interval Value */


}</pre>
<p>A working example for the Atmel AT91SAM7S-EK development board can be found 
in <b>&lt;KEIL installation directory&gt;\ARM\RT 
	Agent\AT91SAM7S-EK</b>.</p>



<h3>Compile and Test</h3>
<ul>
	<li>Compile, download and start execution.</li>
	<li>Set a watch on a variable that is known to be changing. A good example 
	is the write index for the Real-Time Agent output buffer (&lt;Project&gt;--&gt;RT_Agent--&gt;rta--&gt;out--&gt;wr_idx 
	in the <b>
	<a target="_blank" href="http://www.keil.com/support/man/docs/uv3/uv3_db_dbg_symwin.htm">
	Symbol Window</a></b>).</li>
	<li>Enable <b>Periodic Window Update</b> from the <b> View</b> menu.</li>
	<li>If the variable in the <b>
	<a target="_blank" href="http://www.keil.com/support/man/docs/uv3/uv3_db_dbg_watchwin.htm">
	Watch Window</a></b> is changing, then the <b>Real-Time Agent</b> has been 
	successfully integrated into your application!</li>
</ul>


<h3>Troubleshooting</h3>
<p>If you encounter any problems integrating the <b>Real-Time Agent</b>, working 
	examples for several boards can be found in <b>&lt;KEIL 
	installation directory&gt;\ARM\RT 
	Agent</b>. Most examples have versions that can be run in the KEIL simulator if you do not own the hardware.
</p>

<table class="kt" id="tableTrouble" border="0" cellpadding="0" cellspacing="0" width="100%">
	<tr>
		<th class="kt">Symptom</th>
		<th class="kt">Solution</th>
	</tr>
	<tr>
		<td class="kt"><b>Real-Time Agent</b> not responding (1).</td>
		<td class="kt">Add <b>RTA_Init()</b> to the start of your <b>main()</b> function if not using RTX or RL-ARM.</td>
	</tr>
	<tr>
		<td class="kt"><b>Real-Time Agent</b> not responding (2).</td>
		<td class="kt">Not allocating enough heap memory on the target is a common problem. Make sure enough heap is allocated in <b>Startup.s</b> for standard library use (plus any extra for user heap requirements).</td>
	</tr>  
	<tr>
		<td class="kt"><b>Real-Time Agent</b> not responding (3).</td>
		<td class="kt">The <b>Real-Time Agent</b> requires two interrupt vectors on the interrupt controller, check that the interrupts used do not conflict with interrupts used by your project (see <b>&lt;KEIL installation directory&gt;\ARM\RV31\INC\RT_Agent.c - RTA Hardware Specific Section</b>, for the interrupt vectors used on your hardware).</td>
	</tr> 
	<tr>
		<td class="kt"><b>Real-Time Agent Terminal Window</b> gets no data.</td>
		<td class="kt">To use the <b>Real-Time Agent Terminal Window</b> and the <b>RTA_printf()</b> and <b>RTA_scanf()</b> macros, <b>I/O retargeting</b> must be enabled.</td>
	</tr>  
	<tr>
		<td class="kt">Initial <b>printf()</b> / <b>RTA_printf()</b> data is lost and not displayed in<b>Real-Time Agent Terminal Window</b>, or is displayed corrupted.</td>
		<td class="kt">Initial terminal data from the target may be lost because<b> µVision</b> is not ready for it, 
                   either because it has stale data in it's buffer, or the debugger has not yet initialised fully. 
                   The first case is cause by code running in the target at the moment a new debug session is started 
                   and the board reset is issued.The second case can be due to a <b><a target="_blank" href="http://www.keil.com/support/docs/2767.htm">reset 
                   problem</a></b> on some devices. In either case, the problem can be resolved 
                   by executing a blank <b>printf()</b> / <b>RTA_printf()</b>, then a sufficient delay, before executing the 
                   first real <b>printf()</b> / <b>RTA_printf()</b>.
    </td>
	</tr> 
	<tr>
		<td class="kt"><b>printf()</b> / <b>RTA_printf()</b> data is lost.</td>
		<td class="kt">Too much terminal data can overflow the<b> Real-Time Agent</b> output buffers. If (for example) a printf() 
                   is put in a tight loop of the main 
                 	 program code, it will generate too much data for the <b>Real-Time Agent</b> 
                 	 output buffers, and most data will be lost, resulting in unintelligible data 
                 	 in the <b>Serial Window</b>. In this case, enabling <b>Block on Write</b> in the
                 	 <b>Configuration Wizard</b> will stop the data from being lost, 
                 	 but will affect real-time performance.
    </td>
	</tr>
	<tr>
		<td class="kt">STDIO is redirected to the COM port, but appears in the <b>Real-Time Agent Terminal Window</b>.</td>
		<td class="kt">This will happen when using the <b>ARM RealView MicroLIB</b> standard C library, because it does not
                   support redirected file I/O. To solve this problem, use the normal standard libraries.
    </td>
	</tr> 
	<tr>
		<td class="kt">The <b>Real-Time Agent</b> reports 'Buffer Overrun in Target' or other data related errors in the <b>&#956;Vision</b>
                   status bar.</td>
		<td class="kt">This is caused because the data rate from target to host is too high, and is much more likely when using 
                  <b> Task Switch Monitoring</b> and a high target clock speed. It can be resolved in the following ways:
                    <ul>
                      <li> If it occurs intermittently, increase the <b>Output Buffer Size</b> parameter for the buffer used 
                      for Real-Time Agent data travelling from target to host. This will account for bigger peaks in the data rate.</li>
                      <li> Set the <a href="http://www.keil.com/support/man/docs/mcb2300/mcb2300_su_jtag_clock.asp?bhjs=0">JTAG Clock Speed</a> 
                      to <b>Return Clock (RTCK) </b> or the maximum available. This will increase the data rate between the target and <b>&#956;Vision</b>.</li>
                      <li>Disable <b> Task Switch Monitoring</b> in the <b>Configuration Wizard</b></li>
                    </ul>

                  If the problem persists please <a href="#TechnicalSupport">report it</a>.
    </td>
	</tr>
</table>



<p>&nbsp;</p>
<h2><a name="API"></a>Programmer Interface (API)</h2>

<p>The <b>Real-Time Agent API</b> is defined and detailed in <b>&lt;KEIL 
installation directory&gt;\ARM\RV31\INC\RT_Agent.h</b>. It 
contains functions to initialise the <b>Real-Time Agent</b>, and to send user 
defined messages 
back to <b>µVision</b> (reserved for future use). The API is detailed below:</p>
<p> <b>Real-Time Agent API</b></p>
<table class="kt" id="table6" border="0" cellpadding="0" cellspacing="0" width="100%">
	<tr>
		<th class="kt">Function / Macro</th>
		<th class="kt">Description</th>
		<th class="kt">Notes</th>
	</tr>
	<tr>
		<td class="kt">RTA_Init</td>
		<td class="kt">Initialise <b>Real-Time 
		Agent</b>.</td>
		<td class="kt">Must be called before any 
		other RTA function. Memory read and writes will not be 
		available until this function has been called on the target.</td>
	</tr>
	<tr>
		<td class="kt">RTA_Msg</td>
		<td class="kt">Send a message to the host 
		via <b>Real-Time Agent</b>.</td>
		<td class="kt">Reserved 
		for future use.</td>
	</tr>
	<tr>
		<td class="kt">RTA_TermIsKey</td>
		<td class="kt">Check is there is a 
		character available in the <b>RTA Terminal Window</b> buffer.</td>
		<td class="kt" align="center">This 
		function is non-blocking.</td>
	</tr>
	<tr>
		<td class="kt">RTA_TermGetChar</td>
		<td class="kt">Get a character from the <b>RTA Terminal Window</b> buffer.</td>
		<td class="kt" align="center">This 
		function blocks until a character is available.</td>
	</tr>
	<tr>
		<td class="kt">RTA_TermPutChar</td>
		<td class="kt">Write a character to the <b>RTA Terminal Window</b>.</td>
		<td class="kt" align="center">This 
		function blocks until buffer space is available if and only if 'Block on 
		Write' is enabled in the Configuation Wizard, otherwise it discards the 
		character.</td>
	</tr>
	<tr>
		<td class="kt">RTA_printf</td>
		<td class="kt">Print a formatted string 
		to the <b>RTA Terminal Window</b>.</td>
		<td class="kt">Parameters 
		are the same as those for printf(). <b>I/O Retargeting</b> must be implemented to use this macro.</td>
	</tr>
	<tr>
		<td class="kt">RTA_scanf</td>
		<td class="kt">Scan a formatted string 
		from the <b>RTA Terminal Window</b>.</td>
		<td class="kt" align="center">Parameters 
		are the same as those for scanf(). <b>I/O Retargeting</b> must be implemented to use this macro.</td>
	</tr>
</table>
<p> <b>Real-Time Agent Extended API (for Polled Mode and ATME<u>L</u> AT91SAM7Sx 
only)</b></p>
<table class="kt" id="table8" border="0" cellpadding="0" cellspacing="0" width="100%">
	<tr>
		<th class="kt">Function / Macro</th>
		<th class="kt">Description</th>
		<th class="kt">Notes</th>
	</tr>
	<tr>
		<td class="kt">RTA_tx_word_ext</td>
		<td class="kt">Transmits <b>Real-Time Agent</b> data.</td>
		<td class="kt">Must be called periodically from an interrupt in Polled Mode, or in the 
		system interrupt handler for the ATMEL AT91SAM7Sx (refer <a href="#DD">
		Application Configuration</a>).</td>
	</tr>
	<tr>
		<td class="kt">RTA_rx_word_ext</td>
		<td class="kt">Receives <b>Real-Time Agent</b> data.</td>
		<td class="kt">Must be called periodically from an interrupt in Polled Mode, or in the 
		system interrupt handler for the ATMEL AT91SAM7Sx (refer <a href="#DD">
		Application Configuration</a>).</td>
	</tr>
	</table>
<p>&nbsp;</p>
<p> <b>Real-Time Agent Extended API (for Polled Mode only)</b></p>
<table class="kt" id="tablePolledMode" border="0" cellpadding="0" cellspacing="0" width="100%">
	<tr>
		<th class="kt">Function / Macro</th>
		<th class="kt">Description</th>
		<th class="kt">Notes</th>
	</tr>
	<tr>
		<td class="kt">RTA_irq_enable_ext</td>
		<td class="kt">This function must enable the periodic interrupt that calls <b>RTA_tx_word_ext()</b> and <b>RTA_rx_word_ext()</b>.</td>
		<td class="kt">Must be implemented in Polled Mode.</td>
	</tr>
	<tr>
		<td class="kt">RTA_irq_disable_ext</td>
		<td class="kt">This function must disable the periodic interrupt that calls <b>RTA_tx_word_ext()</b> and <b>RTA_rx_word_ext()</b>.</td>
		<td class="kt">Must be implemented in Polled Mode.</td>
	</tr>
</table>
<p>&nbsp;</p>


<h2><a name="Examples"></a>Example Programs</h2>

<p>Example programs for several development boards are 
available in the folder <b>&lt;KEIL installation directory&gt;\ARM\RT Agent</b>. </p>
<p>&nbsp;</p>

<h2><a name="HW"></a>Custom Interrupt Controllers</h2>

<p>The <b>Real-Time Agent</b> uses Debug Communication Channel (DCC) interrupts on the target device. If your 
target device is not supported, but these interrupts are connected, you can add your own 
interrupt controller hardware support by following these steps:</p>
<ul>
	<li>Select <b>Hardware Type --&gt; Custom Hardware</b> in the <b>RTA_Config.c</b> file using the <b>Configuration Wizard</b>.</li>
	<li>Add your custom hardware header file, and implement the C hardware MACROs in the <b>RTA Hardware Specific Section / Custom Hardware</b> section 
	of <b>&lt;KEIL installation directory&gt;\ARM\RV31\INC\RT_Agent.c</b>. </li>
</ul>
<p>The C hardware MACROs must be implemented as follows:</p>
<ul>
	<li><b>TX_IRQ_INIT()</b>: Initialise the DCC transmit interrupt to call RTA_tx_word() 
	when it is triggered.</li>
	<li><b>TX_IRQ_ACK()</b>: Perform actions to acknowledge DCC transmit interrupt.</li>
	<li><b>TX_IRQ_ENABLE()</b>: Enable the DCC transmit interrupt.</li>
	<li><b>TX_IRQ_DISABLE()</b>: Disable the DCC transmit interrupt.</li>
	<li><b>RX_IRQ_INIT()</b>: Initialise the DCC receive interrupt to call RTA_rx_word() 
	when it is triggered. </li>
	<li><b>RX_IRQ_ACK()</b>: Perform actions to acknowledge DCC receive interrupt.</li>
	<li><b>RX_IRQ_ENABLE()</b>: Enable the DCC receive interrupt.</li>
	<li><b>RX_IRQ_DISABLE()</b>: Disable the DCC receive interrupt. </li>
	<li><b>DEF_IRQ_INIT()</b>: Initialise the default IRQ interrupt to call 
	RTA_def_irq() 
	when it is triggered. This handles unexpected interrupts that can occur with 
	some interrupt controllers.</li>
	<li><b>DEF_IRQ_ACK()</b>: Perform actions to acknowledge default IRQ interrupt.</li>
	<li><b>TX_WORD()</b>: This is for future use, currently it must read:<pre>__asm { MCR p14, 0, tx_word, c1, c0 }</pre></li>
	<li><b>RX_WORD()</b>: This is for future use, currently it must read:<pre>__asm { MRC p14, 0, rx_word, c1, c0 }</pre></li>
</ul>

<p>&nbsp;</p>

<h2><a name="Upgrade"></a>Upgrading the Real-Time Agent</h2>

<p>The <b>Real-Time Agent</b> uses code both on the host in <b> µVision </b>and on the target. Between
<b>Real-Time Agent</b> v1.0 and v2.x. major changes were made to the protocol 
that were necessarily incompatible with each other. As a result, from <b>RealView 
MDK 3.10</b>, the <b>Real-Time Agent</b> v1.0 is no longer supported. If your 
project uses this version, you will have to update to v2.x. The good news 
is that this is very simple.</p>
<p><u><b>Real-Time Agent Upgrade v1.0 --&gt; v2.x</b></u></p>
<ol>
	<li>Open the project to upgrade in <b> µVision</b> 
	and note the current configuration of the Real-Time Agent v1.0. This 
	can be found in the <b>RT_Agent.c</b> and <b>Retarget.c</b> file <b>Configuration Wizards</b>. 
	Write down the configuration of the 
	following options:<ul>
		<li><b>RT_Agent.c</b><ul>
			<li>Real-Time Agent<ul>
				<li>Hardware Type</li>
				<li>Output Buffer Size</li>
				<li>Invalid Memory Pattern</li>
				<li>Enable Terminal Emulation<ul>
					<li>Echo Characters Automatically</li>
					<li>Block on Write</li>
				</ul>
			</li>
			</ul>
		</li>
		</ul>
	</li>
	<li><b>Retarget.c</b><ul>
		<li>I/O Retargetting<ul>
				<li>STDOUT Destination</li>
				<li>External file operations defined</li>
			</ul>
		</li>
		</ul>
	</li>
	</ul>
</li>
<li>Remove the <b>RT_Agent.c</b> and <b>Retarget.c</b> files from the project.
<li>RTX or RL-ARM only: note the <b>RTX_Config.c</b> configuration options and any custom changes you have made to this file, 
    then replace it with a new one from the template folder (<b>&lt;KEIL installation directory&gt;\ARM\Startup</b>) and
    re-add your custom changes to the new file.</li>
<li>Follow the steps in <a href="#DD">Application Configuration</a>
  using the settings recorded in step 1 (and step 3 for RTX or RL_ARM).</li>
</ul>
	</li>
	<li>Re-compile and run the project in the <b> µVision </b>debugger. If 
	everything was successful, <b> µVision </b>will report 'Real-Time Agent v2.x: Connected' in the <b> µVision </b> status bar.</li>
</ol>

<p>If you do not see 'Real-Time Agent v2.x: Connected' in the <b> µVision </b>
status bar, follow the troubleshooting tips in <a href="#DD">Application Configuration</a>.</p>
<p>&nbsp;</p>

<h2><a name="TechnicalSupport"></a>Technical Support</h2>

<p>At Keil Software, we are dedicated to providing you with the best development
tools and technical support. That's why we offer numerous ways you can get the
technical support you need to complete your embedded projects.</p>

<ul>
  <li class="LI2"><a href="http://www.keil.com/support"><b>Technical Support
    Knowledgebase</b></a><br>
    More than 1500 technical support questions and answers are available in the
    Support Solutions Knowledgebase. When a new question arises, it is added to
    the knowledgebase which is continuously published to the Web. This enables
    you to get technical support at times when our support staff is unavailable.</li>
  <li class="LI2"><a href="http://www.keil.com/appnotes"><b>Application Notes</b></a><br>
    Numerous Application Notes help you decipher complex features and implement
    robust applications.</li>
  <li class="LI2"><a href="http://www.keil.com/download"><b>Example Programs and
    Files</b></a><br>
    Utility programs, example code, and sample projects are regularly added to
    the Download File section of the web site.</li>
  <li class="LI2"><a href="http://www.keil.com/discuss"><b>Discussion Forum</b></a><br>
    Post questions, comments, and suggestions to the Keil Software Discussion
    Forum and interact with other Keil users around the world.</li>
</ul>

<p>Many of the features of our Technical Support Knowledgebase and Web Site are
the results of your suggestions. If you have any ideas that will improve them,
please <a href="http://www.keil.com/support/feedback.asp">give us your feedback</a>!</p>
<p>&nbsp;</p>

<h2><a name="ContactDetails"></a>Contact Details</h2>

<p>If you experience any problems or have any questions about this Application
Note, contact one of our <a href="http://www.keil.com/distis">distributors</a>
or offices for assistance.</p>

<div align="center">
  <center>
  <table border="0" cellpadding="5" cellspacing="0">
    <tr>
      <td valign="top" nowrap bgcolor="#FFFFCC" style="border: 1 solid #800000">

        <p><b>In the USA...<br>
        </b><br>
        <b>KEIL - An ARM Company</b><br>
        1501 10th Street, Suite 110<br>
        Plano, TX&nbsp; 75074<br>
        USA<br>
        <br>
        800-348-8051 - Sales<br>
        972-312-1107 - Support<br>
        972-312-1159 - Fax<br>
        <a href="mailto:sales.us@keil.com"><br>
        sales.us@keil.com</a> - Sales E-Mail<a href="mailto:E-Mailsupport.us@keil.com"><br>
        support.us@keil.com</a> - Support E-mail&nbsp;<br>
        &nbsp;&nbsp;</p>

      </td>
      <td valign="top" width="30" nowrap></td>
      <td valign="top" nowrap style="border: 1 solid #800000" bgcolor="#FFFFCC">

        <p><b>In Europe...<br>
        </b><br>
        <b>KEIL - An ARM Company<br>
        </b>Bretonischer Ring 15<br>
        D-85630 Grasbrunn<br>
        Germany<br>
        <br>
        +49 89 456040-0 - Sales<br>
        +49 89 456040-24 - Support<br>
        +49 89 468162 - Fax<br>
        <a href="mailto:sales.intl@keil.com"><br>
        sales.intl@keil.com</a> - Sales E-Mail<a href="mailto:E-Mailsupport.intl@keil.com"><br>
        support.intl@keil.com</a> - Support E-Mail<br>
        &nbsp;&nbsp;</p>

      </td>
    </tr>
  </table>
  </center>
</div>
<hr>

<p class="TinyT">Copyright © KEIL - An ARM Company.<br>
All rights reserved.<br>
Visit our web site at <a href="http://www.keil.com">www.keil.com</a>.</p>

</body>

</html>
