/*----------------------------------------------------------------------------
 * Name:    Measure.ini
 * Purpose: Functions used for simulating peripherals
 * Version: V1.01
 *----------------------------------------------------------------------------
 * This file is part of the uVision/ARM development tools.
 * This software may only be used under the terms of a valid, current,
 * end user licence from KEIL for a compatible version of KEIL software
 * development tools. Nothing else gives you the right to use this software.
 *
 * Copyright (c) 2005-2007 Keil Software. All rights reserved.
 *----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------
  MyStatus shows analog and other values ...
 *----------------------------------------------------------------------------*/
FUNC void MyStatus (void)  {
  printf ("=============================\n");
  printf (" Analog-Input-1:  %f\n", ADC1_IN1);
  printf (" Analog-Input-2:  %f\n", ADC1_IN2);
  printf (" GPIOA: %08X\n", PORTA);
  printf ("=============================\n");
}

/*----------------------------------------------------------------------------
  Simulate Push button USR-LEFT 
    Pins:
      - USR-LEFT = PA.18
 *----------------------------------------------------------------------------*/
PORTA |= 0x040000;                      // set PA.18 high: Key Input

// debug function for the push button USR-LEFT
signal void push_USR_LEFT (void)  {
  PORTA &= ~0x040000;                   // set PA.18 low  (Key pressed)
  swatch (0.025);                       // wait 25 msec
  PORTA |= 0x040000;                    // set PA.18 high (Key released)
}

/*----------------------------------------------------------------------------
  Simulate Push button USR-RIGHT 
    Pins:
      - USR-RIGHT = PA.19
 *----------------------------------------------------------------------------*/
PORTA |= 0x080000;                      // set PA.19 high: Key Input

// debug function for the push button USR-RIGHT
signal void push_USR_RIGHT (void)  {
  PORTA &= ~0x080000;                   // set PA.19 low  (Key pressed)
  swatch (0.025);                       // wait 25 msec
  PORTA |= 0x080000;                    // set PA.19 high (Key released)
}

/*----------------------------------------------------------------------------
  Analog1() simulates analog input values given to channel-1 (ADC1)
 *----------------------------------------------------------------------------*/
Signal void Analog1 (float limit)  {
  float volts;

  printf ("Analog1 (%f) entered.\n", limit);
  while (1)  {                          // forever
    volts = 0;
    while (volts <= limit)  {
//not yet simulated      ADC1_IN1 = volts;                 // analog input-1
      twatch (250000);                  // 250000 Cycles Time-Break
      volts += 0.1;                     // increase voltage
    }
    volts = limit;
    while (volts >= 0.0)  {
//not yet simulated      ADC1_IN1 = volts;
      twatch (250000);                  // 250000 Cycles Time-Break
      volts -= 0.1;                     // decrease voltage
    }
  }
}


/* assign USART1/DBGU  to serial window UART1 */
assign win <S1IN >S1OUT           // use this assign if USART1 is used 
//assign win <SIN >SOUT           // use this assign if DBGU   is used

/* define a toolbar buttons */
kill button *
define button "Button USR-LEFT", "push_USR_LEFT ()"
define button "Button USR-RIGHT", "push_USR_RIGHT ()"
define button "My Status Info", "MyStatus ()"
define button "Analog1 0..3V", "Analog1(3.0)"
define button "Stop Analog1", "signal kill Analog1"

/*  The mapping is necessary until mapping in Simulator DLL is fixed. */
MAP 0x400E0800, 0x400E0803 READ WRITE EXEC 
MAP 0x400E0A00, 0x400E0A03 READ WRITE EXEC 

/*  The mapping is necessary until simulation of ADC is available. */
MAP 0x400A8000, 0x400A8FFF READ WRITE 
MAP 0x400AC000, 0x400ACFFF READ WRITE 
