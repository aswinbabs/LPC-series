/******************************************************************************/
/* Debug_Boot.ini: Debug Bootloader Initialization File for NXP LPC313x       */
/******************************************************************************/
// <<< Use Configuration Wizard in Context Menu >>>                           // 
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2007-2009 Keil Software. All rights reserved.                */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************************************************/


DEFINE CHAR Setup;
DEFINE INT  Remap_Adr;
DEFINE INT  Entry;

DEFINE LONG CGU;
DEFINE LONG MPMC;
DEFINE LONG SC;
DEFINE LONG SDRAM;

// Memory mapped peripherals address definitions
CGU    = 0x13004000;
MPMC   = 0x17008000;
SC     = 0x13002800;
SDRAM  = 0x30000000;


FUNC void Clock_Setup (void) {
  if (Setup & 0x01) {
    // Setup clocks: XTAL                          =  12 MHz
    //               HP1 PLL                       = 180 MHz
    //               Processor Clock = HP1 PLL     = 180 MHz
    //               AHB Bus Clock   = HP1 PLL / 2 =  90 MHz
    CPSR = 0x000000D3;                  // Force ARM mode

    _WDWORD(CGU+  0x030, 0x00000000);   // FS1_0:  Use ffast
    _WDWORD(CGU+  0x034, 0x00000000);   // FS1_1:  Use ffast
    _WDWORD(CGU+  0x038, 0x00000000);   // FS1_2:  Use ffast
    _WDWORD(CGU+  0x03C, 0x00000000);   // FS1_3:  Use ffast
    _WDWORD(CGU+  0x040, 0x00000000);   // FS1_4:  Use ffast
    _WDWORD(CGU+  0x044, 0x00000000);   // FS1_5:  Use ffast
    _WDWORD(CGU+  0x048, 0x00000000);   // FS1_6:  Use ffast
    _WDWORD(CGU+  0x04C, 0x00000000);   // FS1_7:  Use ffast
    _WDWORD(CGU+  0x050, 0x00000000);   // FS1_8:  Use ffast
    _WDWORD(CGU+  0x054, 0x00000000);   // FS1_9:  Use ffast
    _WDWORD(CGU+  0x058, 0x00000000);   // FS1_10: Use ffast
    _WDWORD(CGU+  0x05C, 0x00000000);   // FS1_11: Use ffast
    _WDWORD(CGU+  0x000, 0x00000001);   // SCR0:  Switch to ffast
    _WDWORD(CGU+  0x004, 0x00000001);   // SCR1:  Switch to ffast
    _WDWORD(CGU+  0x008, 0x00000001);   // SCR2:  Switch to ffast
    _WDWORD(CGU+  0x00C, 0x00000001);   // SCR3:  Switch to ffast
    _WDWORD(CGU+  0x010, 0x00000001);   // SCR4:  Switch to ffast
    _WDWORD(CGU+  0x014, 0x00000001);   // SCR5:  Switch to ffast
    _WDWORD(CGU+  0x018, 0x00000001);   // SCR6:  Switch to ffast
    _WDWORD(CGU+  0x01C, 0x00000001);   // SCR7:  Switch to ffast
    _WDWORD(CGU+  0x020, 0x00000001);   // SCR8:  Switch to ffast
    _WDWORD(CGU+  0x024, 0x00000001);   // SCR9:  Switch to ffast
    _WDWORD(CGU+  0x028, 0x00000001);   // SCR10: Switch to ffast
    _WDWORD(CGU+  0x02C, 0x00000001);   // SCR11: Switch to ffast

    _WDWORD(CGU+  0xC08, 0x00000001);   // FFAST_ON: Activate Fast Oscillator

    // Setup HP1 PLL to 180 MHz
    _WDWORD(CGU+  0xD38, 0x00000004);   // HP1_MODE: Power-down Mode
    _WDWORD(CGU+  0xD28, 0x00000000);   // HP1_FIN_SELECT: Freq input ffast
    _WDWORD(CGU+  0xD2C, 0x00001FFF);   // HP1_MDEC: M-divider
    _WDWORD(CGU+  0xD30, 0x00000302);   // HP1_NDEC: N-divider
    _WDWORD(CGU+  0xD34, 0x00000062);   // HP1_PDEC: P-divider
    _WDWORD(CGU+  0xD54, 0x00000000);   // HP1_SELR
    _WDWORD(CGU+  0xD58, 0x00000010);   // HP1_SELI
    _WDWORD(CGU+  0xD5C, 0x00000008);   // HP1_SELP
    _WDWORD(CGU+  0xD38, 0x00000001);   // HP1_MODE: Enable
    _sleep_(100);                       // Wait

    _WDWORD(CGU+  0x518, 0x00000002);   // FDC0:  Reset FDC
    _WDWORD(CGU+  0x51C, 0x00000002);   // FDC1:  Reset FDC
    _WDWORD(CGU+  0x520, 0x00000002);   // FDC2:  Reset FDC
    _WDWORD(CGU+  0x524, 0x00000002);   // FDC3:  Reset FDC
    _WDWORD(CGU+  0x528, 0x00000002);   // FDC4:  Reset FDC
    _WDWORD(CGU+  0x52C, 0x00000002);   // FDC5:  Reset FDC
    _WDWORD(CGU+  0x530, 0x00000002);   // FDC6:  Reset FDC
    _WDWORD(CGU+  0x534, 0x00000002);   // FDC7:  Reset FDC
    _WDWORD(CGU+  0x538, 0x00000002);   // FDC8:  Reset FDC
    _WDWORD(CGU+  0x53C, 0x00000002);   // FDC9:  Reset FDC
    _WDWORD(CGU+  0x540, 0x00000002);   // FDC10: Reset FDC
    _WDWORD(CGU+  0x544, 0x00000002);   // FDC11: Reset FDC
    _WDWORD(CGU+  0x548, 0x00000002);   // FDC12: Reset FDC
    _WDWORD(CGU+  0x54C, 0x00000002);   // FDC13: Reset FDC
    _WDWORD(CGU+  0x550, 0x00000002);   // FDC14: Reset FDC
    _WDWORD(CGU+  0x554, 0x00000002);   // FDC15: Reset FDC
    _WDWORD(CGU+  0x558, 0x00000002);   // FDC16: Reset FDC
    _WDWORD(CGU+  0x574, 0x00000002);   // FDC23: Reset FDC

    _WDWORD(CGU+  0x518, 0x00040404);   // FDC0  freq = 180 MHz / 2 = 90 MHz
    _WDWORD(CGU+  0x51C, 0x00000000);   // FDC1  not active
    _WDWORD(CGU+  0x520, 0x00040404);   // FDC2  freq = 180 MHz / 2 = 90 MHz
    _WDWORD(CGU+  0x524, 0x00060604);   // FDC3  freq = 180 MHz / 2 = 90 MHz
    _WDWORD(CGU+  0x528, 0x00060604);   // FDC4  freq = 180 MHz / 2 = 90 MHz
    _WDWORD(CGU+  0x52C, 0x00040404);   // FDC5  freq = 180 MHz / 2 = 90 MHz
    _WDWORD(CGU+  0x530, 0x00040404);   // FDC6  freq = 180 MHz / 2 = 90 MHz
    _WDWORD(CGU+  0x534, 0x0007E4A4);   // FDC7  freq = 12 MHz * (252/400) = 7.56 MHz
    _WDWORD(CGU+  0x538, 0x00040404);   // FDC8  freq = 12 MHz / 2 = 6 MHz
    _WDWORD(CGU+  0x53C, 0x00040404);   // FDC9  freq = 12 MHz / 2 = 6 MHz
    _WDWORD(CGU+  0x540, 0x00040404);   // FDC10 freq = 12 MHz / 2 = 6 MHz
    _WDWORD(CGU+  0x544, 0x00040404);   // FDC11 freq = 180 MHz / 2 = 90 MHz
    _WDWORD(CGU+  0x548, 0x0007E4A4);   // FDC12 freq = 180 MHz * (252/400) = 113.4 MHz
    _WDWORD(CGU+  0x54C, 0x00000000);   // FDC13 not active
    _WDWORD(CGU+  0x555, 0x00040404);   // FDC14 freq = 12 MHz / 2 = 6 MHz
    _WDWORD(CGU+  0x554, 0x00040404);   // FDC15 freq = 180 MHz / 2 = 90 MHz
    _WDWORD(CGU+  0x558, 0x00000000);   // FDC16 not active
    _WDWORD(CGU+  0x574, 0x00040404);   // FDC23 freq = 180 MHz / 2 = 90 MHz

    _WDWORD(CGU+  0x3A0, 0x00000001);   // ESR0:  Use FDC0
    _WDWORD(CGU+  0x3A4, 0x00000001);   // ESR1:  Use FDC0
    _WDWORD(CGU+  0x3A8, 0x00000001);   // ESR2:  Use FDC0
    _WDWORD(CGU+  0x3AC, 0x00000001);   // ESR3:  Use FDC0
    _WDWORD(CGU+  0x3B0, 0x00000001);   // ESR4:  Use FDC0
    _WDWORD(CGU+  0x3B4, 0x00000001);   // ESR5:  Use FDC0
    _WDWORD(CGU+  0x3B8, 0x00000001);   // ESR6:  Use FDC0
    _WDWORD(CGU+  0x3BC, 0x0000000D);   // ESR7:  Use FDC6
    _WDWORD(CGU+  0x3C0, 0x00000001);   // ESR8:  Use FDC0
    _WDWORD(CGU+  0x3C4, 0x00000001);   // ESR9:  Use FDC0
    _WDWORD(CGU+  0x3C8, 0x00000001);   // ESR10: Use FDC0
    _WDWORD(CGU+  0x3CC, 0x00000007);   // ESR11: Use FDC3
    _WDWORD(CGU+  0x3D0, 0x00000005);   // ESR12: Use FDC2
    _WDWORD(CGU+  0x3D4, 0x00000005);   // ESR13: Use FDC2
    _WDWORD(CGU+  0x3D8, 0x00000001);   // ESR14: Use FDC0
    _WDWORD(CGU+  0x3DC, 0x0000000B);   // ESR15: Use FDC5
    _WDWORD(CGU+  0x3E0, 0x00000000);   // ESR16: Use input clock
    _WDWORD(CGU+  0x3E4, 0x00000001);   // ESR17: Use FDC0
    _WDWORD(CGU+  0x3E8, 0x00000000);   // ESR18: Use input clock
    _WDWORD(CGU+  0x3EC, 0x00000001);   // ESR19: Use FDC0
    _WDWORD(CGU+  0x3F0, 0x00000009);   // ESR20: Use FDC4
    _WDWORD(CGU+  0x3F4, 0x00000001);   // ESR21: Use FDC0
    _WDWORD(CGU+  0x3F8, 0x00000001);   // ESR22: Use FDC0
    _WDWORD(CGU+  0x3FC, 0x00000000);   // ESR23: Use input clock
    _WDWORD(CGU+  0x400, 0x00000001);   // ESR24: Use FDC0
    _WDWORD(CGU+  0x404, 0x00000001);   // ESR25: Use FDC0
    _WDWORD(CGU+  0x408, 0x00000001);   // ESR26: Use FDC0
    _WDWORD(CGU+  0x40C, 0x00000001);   // ESR27: Use FDC0
    _WDWORD(CGU+  0x410, 0x00000000);   // ESR28: Use input clock
    _WDWORD(CGU+  0x414, 0x00000001);   // ESR29: Use FDC0
    _WDWORD(CGU+  0x418, 0x00000003);   // ESR30: Use FDC8
    _WDWORD(CGU+  0x41C, 0x00000003);   // ESR31: Use FDC8
    _WDWORD(CGU+  0x420, 0x00000003);   // ESR32: Use FDC8
    _WDWORD(CGU+  0x424, 0x00000001);   // ESR33: Use FDC7
    _WDWORD(CGU+  0x428, 0x00000003);   // ESR34: Use FDC8
    _WDWORD(CGU+  0x42C, 0x00000003);   // ESR35: Use FDC8
    _WDWORD(CGU+  0x430, 0x00000003);   // ESR36: Use FDC8
    _WDWORD(CGU+  0x434, 0x00000003);   // ESR37: Use FDC8
    _WDWORD(CGU+  0x438, 0x00000003);   // ESR38: Use FDC8
    _WDWORD(CGU+  0x43C, 0x00000003);   // ESR39: Use FDC8
    _WDWORD(CGU+  0x440, 0x00000001);   // ESR40: Use FDC9
    _WDWORD(CGU+  0x444, 0x00000001);   // ESR41: Use FDC9
    _WDWORD(CGU+  0x448, 0x00000001);   // ESR42: Use FDC9
    _WDWORD(CGU+  0x44C, 0x00000001);   // ESR43: Use FDC9
    _WDWORD(CGU+  0x450, 0x00000001);   // ESR44: Use FDC9
    _WDWORD(CGU+  0x454, 0x00000001);   // ESR45: Use FDC9
    _WDWORD(CGU+  0x458, 0x00000001);   // ESR46: Use FDC9
    _WDWORD(CGU+  0x45C, 0x00000003);   // ESR47: Use FDC10
    _WDWORD(CGU+  0x460, 0x00000001);   // ESR48: Use FDC9
    _WDWORD(CGU+  0x464, 0x00000001);   // ESR49: Use FDC9
    _WDWORD(CGU+  0x468, 0x00000001);   // ESR50: Use FDC11
    _WDWORD(CGU+  0x46C, 0x00000001);   // ESR51: Use FDC11
    _WDWORD(CGU+  0x470, 0x00000001);   // ESR52: Use FDC11
    _WDWORD(CGU+  0x474, 0x00000001);   // ESR53: Use FDC11
    _WDWORD(CGU+  0x478, 0x00000001);   // ESR54: Use FDC11
    _WDWORD(CGU+  0x47C, 0x00000001);   // ESR55: Use FDC12
    _WDWORD(CGU+  0x480, 0x00000001);   // ESR56: Use FDC11
    _WDWORD(CGU+  0x484, 0x00000001);   // ESR57: Use FDC11
    _WDWORD(CGU+  0x488, 0x00000001);   // ESR58: Use FDC14
    _WDWORD(CGU+  0x48C, 0x00000001);   // ESR59: Use FDC14
    _WDWORD(CGU+  0x490, 0x00000001);   // ESR60: Use FDC14
    _WDWORD(CGU+  0x494, 0x00000001);   // ESR61: Use FDC14
    _WDWORD(CGU+  0x498, 0x00000001);   // ESR62: Use FDC14
    _WDWORD(CGU+  0x49C, 0x00000001);   // ESR63: Use FDC14
    _WDWORD(CGU+  0x4A0, 0x00000001);   // ESR64: Use FDC14
    _WDWORD(CGU+  0x4A4, 0x00000001);   // ESR65: Use FDC14
    _WDWORD(CGU+  0x4A8, 0x00000001);   // ESR66: Use FDC14
    _WDWORD(CGU+  0x4AC, 0x00000001);   // ESR67: Use FDC14
    _WDWORD(CGU+  0x4B0, 0x00000001);   // ESR68: Use FDC14
    _WDWORD(CGU+  0x4B4, 0x00000000);   // ESR69: Use input clock
    _WDWORD(CGU+  0x4B8, 0x00000000);   // ESR70: Use input clock
    _WDWORD(CGU+  0x4BC, 0x00000001);   // ESR71: Use FDC15
    _WDWORD(CGU+  0x4C0, 0x00000000);   // ESR72: Use input clock
    _WDWORD(CGU+  0x4FC, 0x00000001);   // ESR87: Use FDC23
    _WDWORD(CGU+  0x500, 0x00000001);   // ESR88: Use FDC23

    _WDWORD(CGU+  0x518, 0x00040405);   // FDC0 enable
    _WDWORD(CGU+  0x520, 0x00040405);   // FDC2 enable
    _WDWORD(CGU+  0x524, 0x00060605);   // FDC3 enable
    _WDWORD(CGU+  0x528, 0x00060605);   // FDC4 enable
    _WDWORD(CGU+  0x52C, 0x00040405);   // FDC5 enable
    _WDWORD(CGU+  0x530, 0x00040405);   // FDC6 enable
    _WDWORD(CGU+  0x534, 0x0007E4A5);   // FDC7 enable
    _WDWORD(CGU+  0x538, 0x00040405);   // FDC8 enable
    _WDWORD(CGU+  0x53C, 0x00040405);   // FDC9 enable
    _WDWORD(CGU+  0x540, 0x00040405);   // FDC10 enable
    _WDWORD(CGU+  0x544, 0x00040405);   // FDC11 enable
    _WDWORD(CGU+  0x548, 0x0007E4A5);   // FDC12 enable
    _WDWORD(CGU+  0x550, 0x00040405);   // FDC14 enable
    _WDWORD(CGU+  0x554, 0x00040405);   // FDC15 enable
    _WDWORD(CGU+  0x574, 0x00040405);   // FDC23 enable

    _WDWORD(CGU+  0x504, 0x00000000);   // BCR0: Disable FD
    _WDWORD(CGU+  0x504, 0x00000001);   // BCR0: Enable  FD
    _WDWORD(CGU+  0x508, 0x00000000);   // BCR1: Disable FD
    _WDWORD(CGU+  0x508, 0x00000001);   // BCR1: Enable  FD
    _WDWORD(CGU+  0x50C, 0x00000000);   // BCR2: Disable FD
    _WDWORD(CGU+  0x50C, 0x00000001);   // BCR2: Enable  FD
    _WDWORD(CGU+  0x510, 0x00000000);   // BCR3: Disable FD
    _WDWORD(CGU+  0x510, 0x00000001);   // BCR3: Enable  FD

    _WDWORD(CGU+  0x0C0, 0x00000007);   // PCR0:  Enable
    _WDWORD(CGU+  0x0C4, 0x00000007);   // PCR1:  Enable
    _WDWORD(CGU+  0x0C8, 0x00000007);   // PCR2:  Enable
    _WDWORD(CGU+  0x0CC, 0x00000007);   // PCR3:  Enable
    _WDWORD(CGU+  0x0D0, 0x00000007);   // PCR4:  Enable
    _WDWORD(CGU+  0x0D4, 0x00000007);   // PCR5:  Enable
    _WDWORD(CGU+  0x0D8, 0x00000007);   // PCR6:  Enable
    _WDWORD(CGU+  0x0DC, 0x00000007);   // PCR7:  Enable
    _WDWORD(CGU+  0x0E0, 0x00000006);   // PCR8:  Disable
    _WDWORD(CGU+  0x0E4, 0x0000000E);   // PCR9:  Disable
    _WDWORD(CGU+  0x0E8, 0x00000007);   // PCR10: Enable
    _WDWORD(CGU+  0x0EC, 0x00000007);   // PCR11: Enable
    _WDWORD(CGU+  0x0F0, 0x00000000);   // PCR12: Disable
    _WDWORD(CGU+  0x0F4, 0x00000007);   // PCR13: Enable
    _WDWORD(CGU+  0x0F8, 0x00000007);   // PCR14: Enable
    _WDWORD(CGU+  0x0FC, 0x00000007);   // PCR15: Enable
    _WDWORD(CGU+  0x100, 0x00000007);   // PCR16: Enable
    _WDWORD(CGU+  0x104, 0x00000017);   // PCR17: Enable
    _WDWORD(CGU+  0x108, 0x00000007);   // PCR18: Enable
    _WDWORD(CGU+  0x10C, 0x00000007);   // PCR19: Enable
    _WDWORD(CGU+  0x110, 0x00000007);   // PCR20: Enable
    _WDWORD(CGU+  0x114, 0x00000006);   // PCR21: Disable
    _WDWORD(CGU+  0x118, 0x00000007);   // PCR22: Enable
    _WDWORD(CGU+  0x11C, 0x00000006);   // PCR23: Disable
    _WDWORD(CGU+  0x120, 0x00000007);   // PCR24: Enable
    _WDWORD(CGU+  0x124, 0x00000007);   // PCR25: Enable
    _WDWORD(CGU+  0x128, 0x00000017);   // PCR26: Enable
    _WDWORD(CGU+  0x12C, 0x00000007);   // PCR27: Enable
    _WDWORD(CGU+  0x130, 0x00000007);   // PCR28: Enable
    _WDWORD(CGU+  0x134, 0x00000007);   // PCR29: Enable
    _WDWORD(CGU+  0x138, 0x00000007);   // PCR30: Enable
    _WDWORD(CGU+  0x13C, 0x0000000E);   // PCR31: Disable
    _WDWORD(CGU+  0x140, 0x0000000E);   // PCR32: Disable
    _WDWORD(CGU+  0x144, 0x00000006);   // PCR33: Disable
    _WDWORD(CGU+  0x148, 0x00000006);   // PCR34: Disable
    _WDWORD(CGU+  0x14C, 0x0000000F);   // PCR35: Enable
    _WDWORD(CGU+  0x150, 0x0000000F);   // PCR36: Enable
    _WDWORD(CGU+  0x154, 0x0000000F);   // PCR37: Enable
    _WDWORD(CGU+  0x158, 0x0000000F);   // PCR38: Enable
    _WDWORD(CGU+  0x15C, 0x00000006);   // PCR39: Disable
    _WDWORD(CGU+  0x160, 0x00000007);   // PCR40: Enable
    _WDWORD(CGU+  0x164, 0x00000007);   // PCR41: Enable
    _WDWORD(CGU+  0x168, 0x00000007);   // PCR42: Enable
    _WDWORD(CGU+  0x16C, 0x00000006);   // PCR43: Disable
    _WDWORD(CGU+  0x170, 0x00000007);   // PCR44: Enable
    _WDWORD(CGU+  0x174, 0x00000006);   // PCR45: Disable
    _WDWORD(CGU+  0x178, 0x0000000E);   // PCR46: Disable
    _WDWORD(CGU+  0x17C, 0x00000006);   // PCR47: Disable
    _WDWORD(CGU+  0x180, 0x00000006);   // PCR48: Disable
    _WDWORD(CGU+  0x184, 0x00000000);   // PCR49: Disable
    _WDWORD(CGU+  0x188, 0x00000007);   // PCR50: Enable
    _WDWORD(CGU+  0x18C, 0x00000006);   // PCR51: Disable
    _WDWORD(CGU+  0x190, 0x0000000E);   // PCR52: Disable
    _WDWORD(CGU+  0x194, 0x00000007);   // PCR53: Enable
    _WDWORD(CGU+  0x198, 0x00000006);   // PCR54: Disable
    _WDWORD(CGU+  0x19C, 0x00000006);   // PCR55: Disable
    _WDWORD(CGU+  0x1A0, 0x00000006);   // PCR56: Disable
    _WDWORD(CGU+  0x1A4, 0x0000000E);   // PCR57: Disable
    _WDWORD(CGU+  0x1A8, 0x00000007);   // PCR58: Enable
    _WDWORD(CGU+  0x1AC, 0x00000006);   // PCR59: Disable
    _WDWORD(CGU+  0x1B0, 0x00000007);   // PCR60: Enable
    _WDWORD(CGU+  0x1B4, 0x00000006);   // PCR61: Disable
    _WDWORD(CGU+  0x1B8, 0x00000006);   // PCR62: Disable
    _WDWORD(CGU+  0x1BC, 0x00000006);   // PCR63: Disable
    _WDWORD(CGU+  0x1C0, 0x00000006);   // PCR64: Disable
    _WDWORD(CGU+  0x1C4, 0x00000006);   // PCR65: Disable
    _WDWORD(CGU+  0x1C8, 0x00000006);   // PCR66: Disable
    _WDWORD(CGU+  0x1CC, 0x00000006);   // PCR67: Disable
    _WDWORD(CGU+  0x1D0, 0x00000006);   // PCR68: Disable
    _WDWORD(CGU+  0x1D4, 0x00000006);   // PCR69: Disable
    _WDWORD(CGU+  0x1D8, 0x00000006);   // PCR70: Disable
    _WDWORD(CGU+  0x1DC, 0x0000000E);   // PCR71: Disable
    _WDWORD(CGU+  0x1E0, 0x00000007);   // PCR72: Enable
    _WDWORD(CGU+  0x1E4, 0x00000006);   // PCR73: Disable
    _WDWORD(CGU+  0x1E8, 0x00000006);   // PCR74: Disable
    _WDWORD(CGU+  0x1EC, 0x00000006);   // PCR75: Disable
    _WDWORD(CGU+  0x1F0, 0x00000006);   // PCR76: Disable
    _WDWORD(CGU+  0x1F4, 0x00000006);   // PCR77: Disable
    _WDWORD(CGU+  0x1F8, 0x00000006);   // PCR78: Disable
    _WDWORD(CGU+  0x1FC, 0x00000006);   // PCR79: Disable
    _WDWORD(CGU+  0x200, 0x00000006);   // PCR80: Disable
    _WDWORD(CGU+  0x204, 0x00000006);   // PCR81: Disable
    _WDWORD(CGU+  0x208, 0x00000006);   // PCR82: Disable
    _WDWORD(CGU+  0x20C, 0x00000006);   // PCR83: Disable
    _WDWORD(CGU+  0x210, 0x00000006);   // PCR84: Disable
    _WDWORD(CGU+  0x214, 0x00000006);   // PCR85: Disable
    _WDWORD(CGU+  0x218, 0x00000006);   // PCR86: Disable
    _WDWORD(CGU+  0x21C, 0x00000006);   // PCR87: Disable
    _WDWORD(CGU+  0x220, 0x00000006);   // PCR88: Disable
    _WDWORD(CGU+  0x224, 0x00000006);   // PCR89: Disable
    _WDWORD(CGU+  0x228, 0x0000000E);   // PCR90: Disable
    _WDWORD(CGU+  0x22C, 0x00000006);   // PCR91: Disable

    _WDWORD(CGU+  0x060, 0x00000006);   // FS2_0:  Use HP1 PLL
    _WDWORD(CGU+  0x064, 0x00000000);   // FS2_1:  Use ffast
    _WDWORD(CGU+  0x068, 0x00000000);   // FS2_2:  Use ffast
    _WDWORD(CGU+  0x06C, 0x00000006);   // FS2_3:  Use HP1 PLL
    _WDWORD(CGU+  0x070, 0x00000000);   // FS2_4:  Use ffast
    _WDWORD(CGU+  0x074, 0x00000006);   // FS2_5:  Use HP1 PLL
    _WDWORD(CGU+  0x078, 0x00000000);   // FS2_6:  Use ffast
    _WDWORD(CGU+  0x07C, 0x00000005);   // FS2_7:  Use HP0 PLL
    _WDWORD(CGU+  0x080, 0x00000001);   // FS2_8:  Use I2SRX_BCK0
    _WDWORD(CGU+  0x084, 0x00000003);   // FS2_9:  Use I2SRX_BCK1
    _WDWORD(CGU+  0x088, 0x00000006);   // FS2_10: Use HP1 PLL
    _WDWORD(CGU+  0x08C, 0x00000000);   // FS2_11: Use ffast
    _WDWORD(CGU+  0x000, 0x00000002);   // SCR0:  Switch to 2
    _WDWORD(CGU+  0x004, 0x00000002);   // SCR1:  Switch to 2
    _WDWORD(CGU+  0x008, 0x00000002);   // SCR2:  Switch to 2
    _WDWORD(CGU+  0x00C, 0x00000002);   // SCR3:  Switch to 2
    _WDWORD(CGU+  0x010, 0x00000002);   // SCR4:  Switch to 2
    _WDWORD(CGU+  0x014, 0x00000002);   // SCR5:  Switch to 2
    _WDWORD(CGU+  0x018, 0x00000002);   // SCR6:  Switch to 2
    _WDWORD(CGU+  0x01C, 0x00000002);   // SCR7:  Switch to 2
    _WDWORD(CGU+  0x020, 0x00000002);   // SCR8:  Switch to 2
    _WDWORD(CGU+  0x024, 0x00000002);   // SCR9:  Switch to 2
    _WDWORD(CGU+  0x028, 0x00000002);   // SCR10: Switch to 2
    _WDWORD(CGU+  0x02C, 0x00000002);   // SCR11: Switch to 2
    _sleep_(1000);                      // Wait
  }
}

FUNC void SDRAM_Setup (void) {
  if (Setup & 0x02) {
    // Setup SDRAM Controller
    _WDWORD(SC+   0x090, 0x00000001);   // MUX_LCD_EBI_SEL: USe EBI
    _WDWORD(CGU+  0x0DC, 0x00000007);   // PCR7:  Enable EBI_CLK
    _WDWORD(CGU+  0x128, 0x00000017);   // PCR26: Enable MPMC_CFG_CLK
    _WDWORD(CGU+  0x12C, 0x00000007);   // PCR27: Enable MPMC_CFG_CLK2
    _WDWORD(CGU+  0x130, 0x00000007);   // PCR28: Enable MPMC_CFG_CLK3

    _WDWORD(MPMC+ 0x000, 0x00000001);   // MPMCControl: Enable MPMC
    _WDWORD(MPMC+ 0x008, 0x00000000);   // MPMCConfig:  Clock ratio 1:1, LE

    _WDWORD(SC+   0x068, 0x00000828);   // MPMP_DELAYMODES: Set MPMC clock delay
    _sleep_(100);                       // Wait
    _WDWORD(MPMC+ 0x028, 0x00000001);   // MPMCDynamicReadConfig: Command Delay

    _WDWORD(MPMC+ 0x100, 0x00000880);   // MPMCDynamicConfig0
    _WDWORD(MPMC+ 0x104, 0x00000202);   // MPMCDynamicRasCas0

    _WDWORD(MPMC+ 0x030, 0x00000002);   // MPMCDynamicRP
    _WDWORD(MPMC+ 0x034, 0x00000004);   // MPMCDynamicRAS
    _WDWORD(MPMC+ 0x038, 0x00000007);   // MPMCDynamicSREX
    _WDWORD(MPMC+ 0x03C, 0x00000004);   // MPMCDynamicAPR
    _WDWORD(MPMC+ 0x040, 0x00000005);   // MPMCDynamicDAL
    _WDWORD(MPMC+ 0x044, 0x00000007);   // MPMCDynamicWR
    _WDWORD(MPMC+ 0x048, 0x00000006);   // MPMCDynamicRC
    _WDWORD(MPMC+ 0x04C, 0x00000006);   // MPMCDynamicRFC
    _WDWORD(MPMC+ 0x050, 0x00000007);   // MPMCDynamicXSR
    _WDWORD(MPMC+ 0x054, 0x00000001);   // MPMCDynamicRRD
    _WDWORD(MPMC+ 0x058, 0x00000002);   // MPMCDynamicMRD
    _sleep_(100);                       // Wait
    _WDWORD(MPMC+ 0x020, 0x00000183);   // MPMCDynamicControl: NOP command
    _sleep_(100);                       // Wait
    _WDWORD(MPMC+ 0x020, 0x00000103);   // MPMCDynamicControl: PALL command
    _WDWORD(MPMC+ 0x024, 0x00000000);   // MPMCDynamicRefresh
    _sleep_(100);                       // Wait
    _WDWORD(MPMC+ 0x024, 0x0000002B);   // MPMCDynamicRefresh
    _WDWORD(MPMC+ 0x020, 0x00000083);   // MPMCDynamicControl: MODE command
    _RDWORD(SDRAM+0x00046000);          // Set MODE

    _WDWORD(MPMC+ 0x100, 0x00000880);   // MPMCDynamicConfig0
    _WDWORD(MPMC+ 0x104, 0x00000202);   // MPMCDynamicRasCas0

    _WDWORD(MPMC+ 0x020, 0x00000003);   // MPMCDynamicControl: NORMAL command
    _WDWORD(MPMC+ 0x100, 0x00080880);   // MPMCDynamicConfig0: Enable Buffer

    _WDWORD(MPMC+ 0x020, 0x00000002);   // MPMCDynamicControl
  }
}

FUNC void Remap (void) {
  if (Setup & 0x10) {
    _WDWORD(SC+   0x084, Remap_Adr);      // ARM926_SHADOW_POINTER
  }
}

FUNC void PC_Setup (void) {
  if (Setup & 0x40) {
    PC = Entry;
  }
}

FUNC void GoMain (void) {
  if ((Setup & 0xA0) == 0xA0) {
    exec("g,main");
  }
}


// <o1.0> Clock Setup
// <o1.1> SDRAM Setup
// <e1.4> Remap
//   <o2> Address to remap to 0 <0x0-0xFFFFFFFF>
// </e>
// <e1.5> Download Program
FUNC void Download (void) {
  if (Setup & 0x20) {
//  <s0.80> Command for Loading
    exec("LOAD Output\\LPC313x_NAND_BL.axf INCREMENTAL");
  }
}
// </e>
// <e0.6> Setup Program Counter to Entry Point
//   <o2> Program Entry Point <0x0-0xFFFFFFFF>
// </e>
// <e.7> Execute Program untill Main Function
// </e>
Setup     = 0xE0;
Remap_Adr = 0x11029000;
Entry     = 0x11029000;

Clock_Setup();
SDRAM_Setup();
Remap();
Download();
PC_Setup();
GoMain();
