/******************************************************************************/
/* Ext_SDRAM.ini: External SDRAM Initialization File                          */
/******************************************************************************/
// <<< Use Configuration Wizard in Context Menu >>>                           // 
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2005-2009 Keil Software. All rights reserved.                */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************************************************/


DEFINE CHAR Setup;
DEFINE INT  Entry;

DEFINE LONG CLOCK_BASE;
DEFINE LONG SYSCR0_OFS;
DEFINE LONG SYSCR1_OFS;
DEFINE LONG SYSCR2_OFS;
DEFINE LONG SYSCR3_OFS;
DEFINE LONG SYSCR4_OFS;
DEFINE LONG SYSCR5_OFS;
DEFINE LONG SYSCR6_OFS;
DEFINE LONG SYSCR7_OFS;
DEFINE LONG CLKCR5_OFS;

DEFINE LONG SYSCR0_Val;
DEFINE LONG SYSCR1_Val;
DEFINE LONG SYSCR2_Val;
DEFINE LONG SYSCR3_Val;
DEFINE LONG SYSCR4_Val;
DEFINE LONG SYSCR8_Val;
DEFINE LONG CLKCR5_Val;


DEFINE LONG MPMC0_DMC_BASE;
DEFINE LONG MPMC0_SMC_BASE;
DEFINE CHAR DMC_MEMC_STATUS_3_OFS;
DEFINE CHAR DMC_MEMC_CMD_3_OFS;
DEFINE CHAR DMC_DIRECT_CMD_3_OFS;
DEFINE CHAR DMC_MEMORY_CFG_3_OFS
DEFINE CHAR DMC_REFRESH_PRD_3_OFS;
DEFINE CHAR DMC_CAS_LATENCY_3_OFS;
DEFINE CHAR DMC_T_DQSS_3_OFS;
DEFINE CHAR DMC_T_MRD_3_OFS;
DEFINE CHAR DMC_T_RAS_3_OFS;
DEFINE CHAR DMC_T_RC_3_OFS;
DEFINE CHAR DMC_T_RCD_3_OFS;
DEFINE CHAR DMC_T_RFC_3_OFS;
DEFINE CHAR DMC_T_RP_3_OFS;
DEFINE CHAR DMC_T_RRD_3_OFS;
DEFINE CHAR DMC_T_WR_3_OFS;
DEFINE CHAR DMC_T_WTR_3_OFS;
DEFINE CHAR DMC_T_XP_3_OFS;
DEFINE CHAR DMC_T_XSR_3_OFS;
DEFINE CHAR DMC_T_ESR_3_OFS;
DEFINE CHAR DMC_ID_0_CFG_3_OFS;
DEFINE CHAR DMC_ID_1_CFG_3_OFS;
DEFINE CHAR DMC_ID_2_CFG_3_OFS;
DEFINE CHAR DMC_ID_3_CFG_3_OFS;
DEFINE CHAR DMC_CHIP_0_CFG_3_OFS;
DEFINE CHAR DMC_CHIP_1_CFG_3_OFS;
DEFINE CHAR DMC_CHIP_2_CFG_3_OFS;
DEFINE CHAR DMC_CHIP_3_CFG_3_OFS;
DEFINE CHAR DMC_USER_CONFIG_3_OFS;


// Memory mapped peripherals address definitions



CLOCK_BASE      =     0xF0050000;
SYSCR0_OFS      =     0x00;
SYSCR1_OFS      =     0x04;
SYSCR2_OFS      =     0x08;
SYSCR3_OFS      =     0x0C;
SYSCR4_OFS      =     0x10;
SYSCR5_OFS      =     0x14;
SYSCR6_OFS      =     0x18;
SYSCR7_OFS      =     0x1C;
CLKCR5_OFS      =     0x54;

SYSCR0_Val      =     0x00000022;
SYSCR1_Val      =     0x00000000;
//SYSCR2_Val      =     0x00000002;
SYSCR2_Val      =     0x00000000;
SYSCR3_Val      =     0x00000087;
SYSCR4_Val      =     0x00000095;
SYSCR8_Val      =     0x00000000;
CLKCR5_Val      =     0x000000FF; 

MPMC0_DMC_BASE            =   0xF4300000;
MPMC0_SMC_BASE            =   0xF4301000;
DMC_MEMC_STATUS_3_OFS     =   0x0000;
DMC_MEMC_CMD_3_OFS        =   0x0004;
DMC_DIRECT_CMD_3_OFS      =   0x0008;
DMC_MEMORY_CFG_3_OFS      =   0x000C;
DMC_REFRESH_PRD_3_OFS     =   0x0010;
DMC_CAS_LATENCY_3_OFS     =   0x0014;
DMC_T_DQSS_3_OFS          =   0x0018;
DMC_T_MRD_3_OFS           =   0x001C;
DMC_T_RAS_3_OFS           =   0x0020;
DMC_T_RC_3_OFS            =   0x0024;
DMC_T_RCD_3_OFS           =   0x0028;
DMC_T_RFC_3_OFS           =   0x002C;
DMC_T_RP_3_OFS            =   0x0030;
DMC_T_RRD_3_OFS           =   0x0034;
DMC_T_WR_3_OFS            =   0x0038;
DMC_T_WTR_3_OFS           =   0x003C;
DMC_T_XP_3_OFS            =   0x0040;
DMC_T_XSR_3_OFS           =   0x0044;
DMC_T_ESR_3_OFS           =   0x0048;
DMC_ID_0_CFG_3_OFS        =   0x0100;
DMC_ID_1_CFG_3_OFS        =   0x0104;
DMC_ID_2_CFG_3_OFS        =   0x0108;
DMC_ID_3_CFG_3_OFS        =   0x010C;
DMC_CHIP_0_CFG_3_OFS      =   0x0200;
DMC_CHIP_1_CFG_3_OFS      =   0x0204;
DMC_CHIP_2_CFG_3_OFS      =   0x0208;
DMC_CHIP_3_CFG_3_OFS      =   0x020C;
DMC_USER_CONFIG_3_OFS     =   0x0304;


FUNC void Clock_Setup (void) {
  if (Setup & 0x01) {
    _WDWORD(CLOCK_BASE + SYSCR2_OFS, 0x00000000);   
    _WDWORD(CLOCK_BASE + SYSCR3_OFS, 0x00000000);   

    _WDWORD(CLOCK_BASE + SYSCR1_OFS, SYSCR1_Val); 
  
    _WDWORD(CLOCK_BASE + CLKCR5_OFS, CLKCR5_Val);   

    _WDWORD(CLOCK_BASE + SYSCR3_OFS, SYSCR3_Val);   
    _sleep_(10);

    _WDWORD(CLOCK_BASE + SYSCR2_OFS, 0x00000002);   

    _sleep_(10);

  }
}

FUNC void SDRAM_Setup (void) {
  unsigned long dat;
  if (Setup & 0x02) {
    // Setup SDRAM Controller
    dat = _RDWORD(MPMC0_DMC_BASE + DMC_MEMC_STATUS_3_OFS);
    if((dat & 0x00000003) == 0x00000001)
    {
      _WDWORD(MPMC0_DMC_BASE + DMC_MEMC_CMD_3_OFS, 0x00000003); 
      _sleep_(10);
    }


    _WDWORD(MPMC0_DMC_BASE + DMC_MEMC_CMD_3_OFS,    0x00000004);         // Go Command  
    _WDWORD(MPMC0_DMC_BASE + DMC_USER_CONFIG_3_OFS, 0x00000001); // 
    //_WDWORD(MPMC0_DMC_BASE + DMC_USER_CONFIG_3_OFS, 0x00000011); 

    _WDWORD(MPMC0_DMC_BASE + DMC_CAS_LATENCY_3_OFS, 0x00000006); 	 //CAS Latency
    _WDWORD(MPMC0_DMC_BASE + DMC_T_DQSS_3_OFS, 0x00000000); 		 //DQS
    _WDWORD(MPMC0_DMC_BASE + DMC_T_MRD_3_OFS, 0x00000002);               //MRD
    _WDWORD(MPMC0_DMC_BASE + DMC_T_RAS_3_OFS, 0x00000005);               //TRAS
    _WDWORD(MPMC0_DMC_BASE + DMC_T_RC_3_OFS, 0x00000006);                //TRC
    _WDWORD(MPMC0_DMC_BASE + DMC_T_RCD_3_OFS, 0x0000001A); 	 // TRCD
    _WDWORD(MPMC0_DMC_BASE + DMC_T_RFC_3_OFS, 0x000001E6); 		 //AUTO REFRESH command


    _WDWORD(MPMC0_DMC_BASE + DMC_T_RP_3_OFS, 0x0000001A);  //IAR 
    _WDWORD(MPMC0_DMC_BASE + DMC_T_RRD_3_OFS, 0x00000002); //RRD
	  _WDWORD(MPMC0_DMC_BASE + DMC_T_WR_3_OFS, 0x00000002); 
    _WDWORD(MPMC0_DMC_BASE + DMC_T_WTR_3_OFS, 0x00000002); //WTR 
    _WDWORD(MPMC0_DMC_BASE + DMC_T_XP_3_OFS, 0x00000001);  //XP 

    _WDWORD(MPMC0_DMC_BASE + DMC_T_XSR_3_OFS, 0x00000007); 
    _WDWORD(MPMC0_DMC_BASE + DMC_T_ESR_3_OFS, 0x00000014);        //ESR
    _WDWORD(MPMC0_DMC_BASE + DMC_REFRESH_PRD_3_OFS, 0x000002EE); 	//REFRESH Timing


    _WDWORD(MPMC0_DMC_BASE + DMC_MEMORY_CFG_3_OFS, 0x00018011); 

//	  _WDWORD(MPMC0_DMC_BASE + DMC_ID_0_CFG_3_OFS, 0x00000000); 
//	  _WDWORD(MPMC0_DMC_BASE + DMC_ID_1_CFG_3_OFS, 0x00000000); 
//	  _WDWORD(MPMC0_DMC_BASE + DMC_ID_2_CFG_3_OFS, 0x00000000); 
//	  _WDWORD(MPMC0_DMC_BASE + DMC_ID_3_CFG_3_OFS, 0x00000000); 


    _WDWORD(MPMC0_DMC_BASE + DMC_CHIP_0_CFG_3_OFS, 0x000140E0); 

    _sleep_(1);
    _WDWORD(MPMC0_DMC_BASE + DMC_DIRECT_CMD_3_OFS, 0x000C0000); // Normal CMD

    _sleep_(1); 
    _WDWORD(MPMC0_DMC_BASE + DMC_DIRECT_CMD_3_OFS, 0x00000000); // PALL CMD
	
    _sleep_(1);
    _WDWORD(MPMC0_DMC_BASE + DMC_DIRECT_CMD_3_OFS, 0x00040000); // AFRESH CMD

    _sleep_(1);
    _WDWORD(MPMC0_DMC_BASE + DMC_DIRECT_CMD_3_OFS, 0x00040000); // AFRESH CMD
	
    _sleep_(1);  
	//_WDWORD(MPMC0_DMC_BASE + DMC_DIRECT_CMD_3_OFS, 0x00080031); // 
    _WDWORD(MPMC0_DMC_BASE + DMC_DIRECT_CMD_3_OFS, 0x00080033); // 
    _WDWORD(MPMC0_DMC_BASE + DMC_DIRECT_CMD_3_OFS, 0x000C0000); // Normal CMD



    _WDWORD(MPMC0_DMC_BASE +  DMC_MEMC_CMD_3_OFS,   0x00000000); // MEMC CMD GO 
	
	
    _sleep_(10);
  }
}


FUNC void PC_Setup (void) {
  if (Setup & 0x40) {
     PC = Entry;
  }
}

FUNC void GoMain (void) {
  if ((Setup & 0xA0) == 0xA0) {
    exec("g,main");
  }
}


// <o1.0> Clock Setup
// <o1.1> SDRAM Setup
// <e1.4> Remap
// </e>
// <e1.5> Download Program
FUNC void Download (void) {
  if (Setup & 0x20) {
//  <s0.80> Command for Loading
    exec("LOAD Ext_RAM\\Blinky.axf INCREMENTAL");
  }
}
// </e>
// <e0.6> Setup Program Counter to Entry Point
//   <o1> Program Entry Point <0x0-0xFFFFFFFF>
// </e>
// <e.7> Execute Program untill Main Function
// </e>
Setup = 0xE3;
Entry = 0xF8002000;


Clock_Setup();
SDRAM_Setup();
Download();
PC_Setup();
GoMain();
