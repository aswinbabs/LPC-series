
/*----------------------------------------------------------------------------
  Simulate Push button S3 
    Pins:
      - S3 = PC.13
 *----------------------------------------------------------------------------*/
PORT0 |= 0x00004000;                    // set PC.13 high: Key Input

// debug function for the push button S3
signal void push_s3 (void)  {
  PORT0 &= ~0x00004000;                 // set PC.13 low  (Key pressed)
  swatch (0.025);                       // wait 25 msec
  PORT0 |= 0x00004000;                   // set PC.13 high (Key released)
}


/*----------------------------------------------------------------------------
 *  Simulate LCD Display (2 line 40 character Text LCD with 8-bit Interface)
 *    Pins:
 *      - DB0..DB7 = P8.0..P8.7
 *      - RS       = P9.2
 *      - RW       = P9.1
 *      - E        = P9.0
 *---------------------------------------------------------------------------*/

define unsigned long oldPORT9;
define unsigned char Cursor;

define unsigned char Cmd;

define unsigned long _E;
define unsigned long _RW;
define unsigned long _RS;
define unsigned long _CTRL;
define unsigned long _DATA;

define unsigned char DataShift;
define unsigned long LCDMem;

MAP 0x10000000, 0x1000004F READ WRITE   // LCD Memory
                                        // Use Memory watch window to display LCD

DataShift = 0;          // shift data to 0 position
LCDMem    = 0x10000000; // memory to display LCD

oldPORT9 = PORT9;
Cursor   = 0;


_E    = 0x0001;
_RW   = 0x0002;
_RS   = 0x0004;
_CTRL = 0x0007;
_DATA = 0x00FF;

// Clear Display Function
Func void LCD_Clear (void) {
  unsigned char i;

  for (i = 0; i < 80; i++) {
//    _WBYTE(LCDMem + i, 0x20);
    _WBYTE(LCDMem + i, 0x0);
  }
  Cursor = 0;
}

// LCD Display Signal Function
Signal void xLCD_Display (void) {


  // read from LCD display	      
  if (!(oldPORT9 & 0x04) && (PORT9 & 0x04))  {     // The memory read has to shortly after E changes to high
    if ((PORT9 & 0x03) == 0x02)  {                 // read flag register
      PORT8 = (Cursor & 0x7F);                     // returns DD RAM pointer to port 0 of the 8051
    }
  }

  // write to LCD display
  if ((oldPORT9 & 0x01) && !(PORT9 & 0x01))  {     // The memory read has to shortly after E changes to high
    if ((PORT9 & 0x06) == 0)  {                    // write to command register
      if (PORT8 == 0x01)  {                        // command is 'Clear Display'
        LCD_Clear();                               // call the 'Clear Display' simulation 
      }
      if (PORT8 & 0x80)  {                         // command is 'Set DDRAM address' (  = cursor position )
        Cursor = (PORT8 & 0x7F);                   // set DD RAM pointer 
      }
    }

    if ((PORT9 & 0x06) == 0x04)  {                 // command is 'Write to RAM' 
     _WBYTE (LCDMem + Cursor, PORT8);              // write to Display RAM 
      Cursor++;                                    // Advance cursor position by 1
    }

    if (PORT9 & 0x02)  {                           // read mode
      PORT8 = 0x7F;                                // display data goes to high, except status
    }
  }  
  oldPORT9 = PORT9;                                // store the value of E in temporary buffer for change detection
}

// LCD Display Signal Function
Signal void LCD_Display (void) {
  unsigned char val;

  while (1) {
    wwatch(PORT9);  // Wait for write to PORT9

    // read from LCD display	      
    if (!(oldPORT9 & 0x04) && (PORT9 & 0x04))  {     // The memory read has to shortly after E changes to high
      if ((PORT9 & 0x03) == 0x02)  {                 // read flag register
        PORT8 = (Cursor & 0x7F);                     // returns DD RAM pointer to port 0 of the 8051
      }
    }

    // write to LCD display
    if ((oldPORT9 & 0x01) && !(PORT9 & 0x01))  {     // The memory read has to shortly after E changes to high
      if ((PORT9 & 0x06) == 0)  {                    // write to command register
        if (PORT8 == 0x01)  {                        // command is 'Clear Display'
          LCD_Clear();                               // call the 'Clear Display' simulation 
        }
        if (PORT8 & 0x80)  {                         // command is 'Set DDRAM address' (  = cursor position )
          Cursor = (PORT8 & 0x7F);                   // set DD RAM pointer 
        }
      }

      if ((PORT9 & 0x06) == 0x04)  {                 // command is 'Write to RAM' 
       _WBYTE (LCDMem + Cursor, PORT8);              // write to Display RAM 
        Cursor++;                                    // Advance cursor position by 1
      }

      if (PORT9 & 0x02)  {                           // read mode
        PORT8 = 0x7F;                                // display data goes to high, except status
      }
    }  
    oldPORT9 = PORT9;                                // store the value of E in temporary buffer for change detection
  }
}

/* define a toolbar button to call push_key */
define button "Push for Walk", "push_s3 ()"

RADIX=10 // decimal output in watch window

LCD_Display()

