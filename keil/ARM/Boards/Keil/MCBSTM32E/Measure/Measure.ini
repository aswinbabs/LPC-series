/*----------------------------------------------------------------------------
 * Name:    Measure.ini
 * Purpose: Functions used for simulating peripherals
 * Version: V1.00
 *----------------------------------------------------------------------------
 * This file is part of the uVision/ARM development tools.
 * This software may only be used under the terms of a valid, current,
 * end user licence from KEIL for a compatible version of KEIL software
 * development tools. Nothing else gives you the right to use this software.
 *
 * Copyright (c) 2005-2007 Keil Software. All rights reserved.
 *----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------
  MyStatus shows analog and other values ...
 *----------------------------------------------------------------------------*/
FUNC void MyStatus (void)  {
  printf ("=============================\n");
  printf (" Analog-Input-1:  %f\n", ADC1_IN14);
  printf (" GPIOG: %08X\n", PORTG);
  printf ("=============================\n");
}

/*----------------------------------------------------------------------------
  Simulate Push button left 
    Pins:
      - Joystick left = PG.14
 *----------------------------------------------------------------------------*/
PORTG |= 0x4000;                        // set PG.14 high: Key Input

// debug function for the Joystick left
signal void push_left (void)  {
  PORTG &= ~0x4000;                     // set PG.14 low  (Key pressed)
  swatch (0.025);                       // wait 25 msec
  PORTG |= 0x4000;                      // set PG.14 high (Key released)
}

/*----------------------------------------------------------------------------
  Simulate Push button right 
    Pins:
      - Joystick right = PG.13
 *----------------------------------------------------------------------------*/
PORTG |= 0x2000;                        // set PG.13 high: Key Input

// debug function for the Joystick right
signal void push_right (void)  {
  PORTG &= ~0x2000;                     // set PG.13 low  (Key pressed)
  swatch (0.025);                       // wait 25 msec
  PORTG |= 0x2000;                      // set PG.13 high (Key released)
}

/*----------------------------------------------------------------------------
  Simulate Push button up 
    Pins:
      - Joystick up = PG.15
 *----------------------------------------------------------------------------*/
PORTG |= 0x8000;                        // set PG.15 high: Key Input

// debug function for the Joystick up
signal void push_up (void)  {
  PORTG &= ~0x8000;                     // set PG.15 low  (Key pressed)
  swatch (0.025);                       // wait 25 msec
  PORTG |= 0x8000;                      // set PG.15 high (Key released)
}

/*----------------------------------------------------------------------------
  Simulate Push button select 
    Pins:
      - Joystick select = PG.7
 *----------------------------------------------------------------------------*/
PORTG |= 0x0080;                        // set PG.7 high: Key Input

// debug function for the Joystick select
signal void push_select (void)  {
  PORTG &= ~0x0080;                     // set PG.7 low  (Key pressed)
  swatch (0.025);                       // wait 25 msec
  PORTG |= 0x0080;                      // set PG.7 high (Key released)
}


/*----------------------------------------------------------------------------
  Analog1() simulates analog input values given to channel-1 (ADC1)
 *----------------------------------------------------------------------------*/
Signal void Analog1 (float limit)  {
  float volts;

  printf ("Analog1 (%f) entered.\n", limit);
  while (1)  {                          // forever
    volts = 0;
    while (volts <= limit)  {
      ADC1_IN14 = volts;                // analog input-1
//      swatch (0.01);                    // wait 0.01 seconds
      twatch (250000);                  // 250000 Cycles Time-Break
      volts += 0.1;                     // increase voltage
    }
    volts = limit;
    while (volts >= 0.0)  {
      ADC1_IN14 = volts;
//      swatch (0.01);                    // wait 0.01 seconds
      twatch (250000);                  // 250000 Cycles Time-Break
      volts -= 0.1;                     // decrease voltage
    }
  }
}


/* define a toolbar buttons */
KILL Button *
define button "Joystick left",   "push_left ()"
define button "Joystick right",  "push_right ()"
define button "Joystick up",     "push_up ()"
define button "Joystick select", "push_select ()"
define button "My Status Info",  "MyStatus ()"
define button "Analog1 0..3V",   "Analog1(3.0)"
define button "Stop Analog1",    "signal kill Analog1"

MAP 0x6C000000,0x6C00FFFF READ WRITE    // map LCD RAM
