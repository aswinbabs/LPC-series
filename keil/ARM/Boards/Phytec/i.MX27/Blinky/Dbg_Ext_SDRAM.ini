/******************************************************************************/
/* Dbg_Ext_SDRAM.ini: External SDRAM Debugging Initialization File            */
/******************************************************************************/
// <<< Use Configuration Wizard in Context Menu >>>                           // 
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2005-2008 Keil Software. All rights reserved.                */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************************************************/


DEFINE CHAR Setup;
DEFINE INT  Entry;

// Memory mapped peripherals address definitions
DEFINE LONG AIPI1;
DEFINE LONG AIPI2;
DEFINE LONG CLK;
DEFINE LONG SYS;
DEFINE LONG SDRAMC;
DEFINE LONG CSD0;
AIPI1  = 0x10000000;
AIPI2  = 0x10020000;
CLK    = 0x10027000;
SYS    = 0x10027800;
SDRAMC = 0xD8001000;
CSD0   = 0xA0000000;   


FUNC void AIPI_Setup (void) {
  LONG AIPI1_PSR0, AIPI1_PSR1, AIPI1_PAR, AIPI2_PSR0, AIPI2_PSR1, AIPI2_PAR;

  AIPI1_PSR0      = AIPI1 + 0x00;
  AIPI1_PSR1      = AIPI1 + 0x04;
  AIPI1_PAR       = AIPI1 + 0x08;
  AIPI2_PSR0      = AIPI2 + 0x00;
  AIPI2_PSR1      = AIPI2 + 0x04;
  AIPI2_PAR       = AIPI2 + 0x08;

  _WDWORD(AIPI1_PSR0, 0x00340304);
  _WDWORD(AIPI1_PSR1, 0xFFFBFCFB);
  _WDWORD(AIPI1_PAR , 0xFFDFFFFF);
  _WDWORD(AIPI2_PSR0, 0x3FFC0000);
  _WDWORD(AIPI2_PSR1, 0x3FFFFDFF);
  _WDWORD(AIPI2_PAR , 0xFFFFFF7F);
}

FUNC void Clock_Setup (void) {
  if (Setup & 0x01) {
    // Setup clock: XTAL               =  26.00 MHz, 
    //              MPLL               = 399.00 MHz 
    //              SPLL               = 240.00 MHz 
    //              ARM CLK = MPLL     = 266.00 MHz
    //              AHB CLK = MPLL / 2 = 133.00 MHz
    LONG CSCR, MPCTL0, MPCTL1, SPCTL0, SPCTL1, PCDR0, PCDR1, PCCR0, PCCR1; 

    CSCR            = CLK + 0x00;       // Clock Source Control
    MPCTL0          = CLK + 0x04;       // MPLL Control 0
    MPCTL1          = CLK + 0x08;       // MPLL Control 1
    SPCTL0          = CLK + 0x0C;       // SPLL Control 0
    SPCTL1          = CLK + 0x10;       // SPLL Control 1
    PCDR0           = CLK + 0x18;       // Peripheral Clock Divider 0
    PCDR1           = CLK + 0x1C;       // Peripheral Clock Divider 1
    PCCR0           = CLK + 0x20;       // Peripheral Clock Control 0
    PCCR1           = CLK + 0x24;       // Peripheral Clock Control 1

    _WDWORD(MPCTL0  , 0x00331C23);
    _WDWORD(MPCTL1  , 0x00000000);
    _WDWORD(CSCR    , 0x33F41307);
    _sleep_ (100);

    _WDWORD(SPCTL0  , 0x040C2403);
    _WDWORD(SPCTL1  , 0x00000000);
    _WDWORD(CSCR    , 0x33F81307);
    _sleep_ (100);

    _WDWORD(CSCR    , 0x33F30107);
    _WDWORD(PCDR0   , 0x12041543);
    _WDWORD(PCDR1   , 0x03030303);
    _WDWORD(PCCR0   , 0x060101C0);
    _WDWORD(PCCR1   , 0xFF4B6848);
  }
}

FUNC void SDRAM_Setup (void) {
  // Enhanced SDRAM Controller (ESDRAMC) User Interface
  if (Setup & 0x02) {

    LONG ESDCTL0, ESDCFG0, ESDCTL1, ESDCFG1, ESDMISC, ESDCDLY1, ESDCDLY2, 
         ESDCDLY3, ESDCDLY4, ESDCDLY5, ESDCDLYL;
    LONG DSCR1, DSCR2, DSCR3, DSCR4, DSCR5, DSCR6, DSCR7, DSCR8, DSCR9, 
         DSCR10, DSCR11, DSCR12, DSCR13;
    LONG NORMAL_CMD, PALL_CMD, AREFSH_MODE, MODE_CMD, MREFSH_MODE, ESDCTL_MSK;

    ESDCTL0         = SDRAMC + 0x00;    // ESDRAM Control 0
    ESDCFG0         = SDRAMC + 0x04;    // ESDRAM Configuration 0
    ESDCTL1         = SDRAMC + 0x08;    // ESDRAM Control 1
    ESDCFG1         = SDRAMC + 0x0C;    // ESDRAM Configuration 1
    ESDMISC         = SDRAMC + 0x10;    // ESDRAM Miscellaneous
    ESDCDLY1        = SDRAMC + 0x20;    // EMDDR Delay Line 1 Config Dbg
    ESDCDLY2        = SDRAMC + 0x24;    // EMDDR Delay Line 2 Config Dbg
    ESDCDLY3        = SDRAMC + 0x28;    // EMDDR Delay Line 3 Config Dbg
    ESDCDLY4        = SDRAMC + 0x2C;    // EMDDR Delay Line 4 Config Dbg
    ESDCDLY5        = SDRAMC + 0x30;    // EMDDR Delay Line 5 Config Dbg
    ESDCDLYL        = SDRAMC + 0x34;    // EMDDR Delay Line Cyc Conf Dbg

    DSCR1           = SYS + 0x20;       // Drive Strength Control 1
    DSCR2           = SYS + 0x24;       // Drive Strength Control 2
    DSCR3           = SYS + 0x28;       // Drive Strength Control 3
    DSCR4           = SYS + 0x2C;       // Drive Strength Control 4
    DSCR5           = SYS + 0x30;       // Drive Strength Control 5
    DSCR6           = SYS + 0x34;       // Drive Strength Control 6
    DSCR7           = SYS + 0x38;       // Drive Strength Control 7
    DSCR8           = SYS + 0x3C;       // Drive Strength Control 8
    DSCR9           = SYS + 0x40;       // Drive Strength Control 9
    DSCR10          = SYS + 0x44;       // Drive Strength Control 10
    DSCR11          = SYS + 0x48;       // Drive Strength Control 11
    DSCR12          = SYS + 0x4C;       // Drive Strength Control 12
    DSCR13          = SYS + 0x50;       // Drive Strength Control 13

    // Constants
    NORMAL_CMD      = (0x0 << 28);      // NORMAL        Command
    PALL_CMD        = (0x1 << 28);      // Precharge All Command
    AREFSH_MODE     = (0x2 << 28);      // Auto-Refresh  Command
    MODE_CMD        = (0x3 << 28);      // MODE          Command
    MREFSH_MODE     = (0x4 << 28);      // Manual Self Refresh
    ESDCTL_MSK      = (0xFFF00000);     // ESDCTL Register Mask for Init

    // Setup ESDRAM Controller
    _WDWORD(ESDMISC     , 0x00000008);
    _WDWORD(DSCR3       , 0x55555555);
    _WDWORD(DSCR5       , 0x55555555);
    _WDWORD(DSCR6       , 0x55555555);
    _WDWORD(DSCR7       , 0x00005005);
    _WDWORD(DSCR8       , 0x15555555);
    _WDWORD(ESDMISC     , 0x00000004);
    _WDWORD(ESDCFG0     , 0x006AC73A);
    _WDWORD(ESDCTL0     , (0x82226080 & 0xFFF00000) | PALL_CMD);
    _WDWORD((CSD0 | 0x0F00),  0);
    _WDWORD(ESDCTL0     , (0x82226080 & 0xFFF00000) | AREFSH_MODE);
    _WDWORD((CSD0 | 0x0F00),  0);
    _WDWORD((CSD0 | 0x0F00),  0);
    _WDWORD((CSD0 | 0x0F00),  0);
    _WDWORD((CSD0 | 0x0F00),  0);
    _WDWORD(ESDCTL0     , (0x82226080 & 0xFFF00000) | AREFSH_MODE);
    _WDWORD((CSD0 | 0x0F00),  0);
    _WDWORD((CSD0 | 0x0F00),  0);
    _WDWORD((CSD0 | 0x0F00),  0);
    _WDWORD((CSD0 | 0x0F00),  0);
    _WDWORD(ESDCTL0     , (0x82226080 & 0xFFF00000) | MODE_CMD);
    _WBYTE ((CSD0 | 0x00000033), 0xDA);
    _WBYTE ((CSD0 | 0x01000000), 0xFF);
    _WDWORD(ESDCTL0     , 0x82226080);

    _WDWORD(ESDCDLY1    , 0x00000000);
    _WDWORD(ESDCDLY2    , 0x00000000);
    _WDWORD(ESDCDLY3    , 0x00000000);
    _WDWORD(ESDCDLY4    , 0x00000000);
    _WDWORD(ESDCDLY5    , 0x00000000);
  }
}

FUNC void PC_Setup (void) {
  if (Setup & 0x40) {
    PC = Entry;
  }
}

FUNC void GoMain (void) {
  if ((Setup & 0xA0) == 0xA0) {
    exec("g,main");
  }
}


// <o1.0> Clock Setup
// <o1.1> SDRAM Setup
// <e1.5> Download Program
FUNC void Download (void) {
  if (Setup & 0x20) {
//  <s0.80> Command for Loading
    exec("LOAD Ext_SDRAM\\Blinky.axf INCREMENTAL");
  }
}
// </e>
// <e0.6> Setup Program Counter to Entry Point
//   <o1> Program Entry Point <0x0-0xFFFFFFFF>
// </e>
// <e.7> Execute Program untill Main Function
// </e>
Setup = 0xE3;
Entry = 0xA0000000;


AIPI_Setup();
Clock_Setup();
SDRAM_Setup();
Download();
PC_Setup();
GoMain();
