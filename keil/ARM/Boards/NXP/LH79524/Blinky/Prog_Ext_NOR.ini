/******************************************************************************/
/* Prog_Ext_NOR.ini: External NOR Flash Programming Initialization File       */
/******************************************************************************/
// <<< Use Configuration Wizard in Context Menu >>>                           // 
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2005-2007 Keil Software. All rights reserved.                */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************************************************/


DEFINE INT Setup;
DEFINE INT Entry;


FUNC void EnableFlashProgramming (void) {
  if (Setup & (1 << 2)) {
    _WBYTE (0x4C800000, 0x01);          // I/O Controller (CPLD): Enable Flash Programming
  }
}

FUNC void PC_Setup (void) {
  if (Setup & (1 << 5)) {
    PC = Entry;
  }
}

FUNC void GoMain (void) {
  if (Setup & ((1 << 3) | (1 << 6))) {
    exec("g,main");
  }
}

Setup = 0x00;

// <e0.0> Clock Setup
Setup |= 0x01;

FUNC void Clock_Setup (void) {

  if (Setup & (1 << 0)) {

// <h> Clock Setup (RCPC)
//   <h> Control Register (CTRL)
//     <o0.1..6> OUTSEL: CLKOUT Source Select
//                     <0=> System clock oscillator
//                     <1=> Off
//                     <2=> FCLK
//                     <3=> HCLK
//     <o0.1..4> PWRDWNSEL: Power Down Mode Select
//                     <0=> Active mode
//                     <1=> Standby mode
//                     <2=> Sleep mode
//                     <3=> Stop1 mode
//                     <4=> Stop2 mode
//   </h>
    _WDWORD(0xFFFE2000, 0x00000263);    // CTRL

//   <h> AHB Clock Control Register (AHBCLKCTRL)
//     <o1.4>    LCD: AHB LCD Clock Disable
//     <o1.3>    USB: AHB USB Clock Disable
//     <o1.2>    ETHERNET: AHB ETHERNET Clock Disable
//     <o1.1>    SDRAM: AHB SDRAM Controller Clock Disable
//     <o1.0>    DMA: AHB DMA Clock Disable
//   </h>
    _WDWORD(0xFFFE202C, 0x0000001C);    // AHBCLKCTRL

//   <h> System PLL Control Register (SYSPLLCNTL)
//     <o1.12>   SYSFRANGE: System PLL Output Frequency Range Select
//                     <0=> 20 MHz to 100 MHz
//                     <1=> 100 MHz to 304.819 MHz
//     <o1.6..11> SYSPREDIV: System PLL Pre-Divider <0-64>
//                     <i> Prescales the system PLL reference clock.
//                     <i> Must satisfy equation: (sys clock osc freq)/(SYSPREDIV) >= 5 MHz
//     <o1.0..5> SYSLOOPDIV: System PLL Loop-Divider <1-63>
//                     <i> Prescales the system PLL feedback clock.
//   </h>
    _WDWORD(0xFFFE20C0, 0x00003049);    // SYSPLLCNTL

//   <h> System Clock Prescaler Register (SYSCLKPRE)
//     <o0.1..3> HDIV: HCLK Divisor <2-30:2><#/2>
//   </h>
    _WDWORD(0xFFFE2018, 0x00000001);    // SYSCLKPRE

//   <h> CPU Clock Prescaler Register (CPUCLKPRE)
//     <o1.0..3> FDIV: FCLK Divisor <2-30:2><#/2>
//   </h>
    _WDWORD(0xFFFE201C, 0x00000001);    // CPUCLKPRE

//   <h> Core Clock Configuration Register (CORECONFIG)
//     <o0.1..1> CCLK: Core Clock Configuration
//                     <0=> Standard mode, async operation
//                     <1=> FastBus extension mode
//                     <2=> Standard mode, sync operation
//                     <3=> FastBus extension mode
//   </h>
    _WDWORD(0xFFFE2088, 0x00000001);    // CORECONFIG
// </h>
  }
}
// </e>


// <e0.1> EMC Setup
Setup |= 0x02;

FUNC void EMC_Setup (void) {

  if (Setup & (1 << 1)) {

    _WDWORD(0xFFFE5030, 0x00005555);    // MUXCTL7: Enable A16..A23
    _WDWORD(0xFFFE5048, 0x00005555);    // MUXCTL10: Enable D21..D25
    _WDWORD(0xFFFE5050, 0x00005555);    // MUXCTL11: Enable D9..D12, D17..D20
    _WDWORD(0xFFFE5058, 0x00005000);    // MUXCTL12: Enable D8, D16
    _WDWORD(0xFFFE5090, 0x00000441);    // MUXCTL19: Enable D29..D31
    _WDWORD(0xFFFE5098, 0x00001110);    // MUXCTL20: Enable D26..D28

// <h> External Memory Controller Setup (EMC)
//   <h> EMC Control Register (CONTROL)
//     <i> Controls operation of the memory controller
//     <o1.2> MODE: Low-power Mode Enable
//     <o1.0> ENABLE: EMC Enable
//   </h>
    _WDWORD(0xFFFF1000, 0x00000001);    // CONTROL

//   <h> EMC Configuration Register (CONFIG)
//     <i> Configures operation of the memory controller
//     <o1.8> CCLK: CLKOUT ratio
//                     <0=> 1:1
//                     <1=> 1:2
//     <o1.0> Endian mode
//                     <0=> Little-endian
//                     <1=> Big-endian
//   </h>
    _WDWORD(0xFFFF1008, 0x00000000);    // CONFIG

//   <h> Static Memory Interface Configuration
//     <h> Configure External Bus Behaviour for Static nCS0 Area
//       <h> Static Memory Configuration Register (SCONFIG0)
//         <i> Defines the configuration information for the static memory nCS0
//         <o1.20> WP: Write Protect
//         <o1.19> B: Read and Write Buffer Enable
//         <o1.8> EW: Extended Wait Enable
//         <o1.7> BLS: Byte Lane State
//                     <0=> For reads nBLE are HIGH, for writes nBLE are HIGH
//                     <1=> For reads nBLE are LOW, for writes nBLE are LOW
//         <o1.6> PC: Chip Select Polarity
//                     <0=> Active LOW chip select
//                     <1=> Active HIGH chip select
//         <o1.3> PM: Page Mode Enable
//         <o1.0..1> MW: Memory Width
//                     <0=> 8 bit
//                     <1=> 16 bit
//                     <2=> 32 bit
//       </h>
    _WDWORD(0xFFFF1200, 0x00000002);    // SCONFIG0

//       <h> Static Memory Write Enable Delay Register (SWAITWEN0)
//         <i> Selects the delay from nCS0 to write enable
//         <o.1..3> WAITWEN: Wait Write Enable <0-15>
//       </h>
    _WDWORD(0xFFFF1204, 0x0000000C);    // SWAITWEN0

//       <h> Static Memory Output Enable Delay register (SWAITOEN0)
//         <i> Selects the delay from nCS0 or address change, whichever is later, to output enable
//         <o1.0..3> WAITOEN: Wait Output Enable <0-15>
//       </h>
    _WDWORD(0xFFFF1208, 0x0000000C);    // SWAITOEN0
                                      
//       <h> Static Memory Read Delay Register (SWAITRD0)
//         <i> Selects the delay from nCS0 to a read access
//         <o1.0..4> WAITRD: Non-page Mode Read Wait States or Asynchronous Page Mode Read First Access Wait Atates <1-32> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF120C, 0x0000000C);    // SWAITRD0

//       <h> Static Memory Page Mode Read Delay Register (SWAITPAGE0)
//         <i> Selects the delay for asynchronous page mode sequential accesses for nCS0
//         <o1.0..4> WAITPAGE: Asynchronous Page Mode Read After the First Read Wait States <1-32> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF1210, 0x0000000C);    // SWAITPAGE0

//       <h> Static Memory Write Delay Register (SWAITWR0)
//         <i> Selects the delay from nCS0 to a write access
//         <o1.0..4> WAITWR: Write Wait States <0-31>
//       </h>
    _WDWORD(0xFFFF1214, 0x0000000C);    // SWAITWR0

//       <h> Static Memory Turn Round Delay Register (STURN0)
//         <i> Selects the number of bus turnaround cycles for nCS0
//         <o1.0..4> BTC: Bus Turnaround Cycles <1-16> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF1218, 0x0000000C);    // STURN0
//     </h>

//     <h> Configure External Bus Behaviour for Static nCS1 Area
//       <h> Static Memory Configuration Register (SCONFIG1)
//         <i> Defines the configuration information for the static memory nCS1
//         <o1.20> WP: Write Protect
//         <o1.19> B: Read and Write Buffer Enable
//         <o1.8> EW: Extended Wait Enable
//         <o1.7> BLS: Byte Lane State
//                     <0=> For reads nBLE are HIGH, for writes nBLE are HIGH
//                     <1=> For reads nBLE are LOW, for writes nBLE are LOW
//         <o1.6> PC: Chip Select Polarity
//                     <0=> Active LOW chip select
//                     <1=> Active HIGH chip select
//         <o1.3> PM: Page Mode Enable
//         <o1.0..1> MW: Memory Width
//                     <0=> 8 bit
//                     <1=> 16 bit
//                     <2=> 32 bit
//       </h>
    _WDWORD(0xFFFF1260, 0x00000081);    // SCONFIG1

//       <h> Static Memory Write Enable Delay Register (SWAITWEN1)
//         <i> Selects the delay from nCS1 to write enable
//         <o.1..3> WAITWEN: Wait Write Enable <0-15>
//       </h>
    _WDWORD(0xFFFF1264, 0x00000001);    // SWAITWEN1

//       <h> Static Memory Output Enable Delay register (SWAITOEN1)
//         <i> Selects the delay from nCS3 or address change, whichever is later, to output enable
//         <o1.0..3> WAITOEN: Wait Output Enable <0-15>
//       </h>
    _WDWORD(0xFFFF1268, 0x00000001);    // SWAITOEN1
                                      
//       <h> Static Memory Read Delay Register (SWAITRD1)
//         <i> Selects the delay from nCS1 to a read access
//         <o1.0..4> WAITRD: Non-page Mode Read Wait States or Asynchronous Page Mode Read First Access Wait Atates <1-32> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF126C, 0x00000006);    // SWAITRD1

//       <h> Static Memory Page Mode Read Delay Register (SWAITPAGE1)
//         <i> Selects the delay for asynchronous page mode sequential accesses for nCS1
//         <o1.0..4> WAITPAGE: Asynchronous Page Mode Read After the First Read Wait States <1-32> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF1270, 0x00000002);    // SWAITPAGE1

//       <h> Static Memory Write Delay Register (SWAITWR3)
//         <i> Selects the delay from nCS3 to a write access
//         <o1.0..4> WAITWR: Write Wait States <0-31>
//       </h>
    _WDWORD(0xFFFF1274, 0x00000006);    // SWAITWR1

//       <h> Static Memory Turn Round Delay Register (STURN1)
//         <i> Selects the number of bus turnaround cycles for nCS1
//         <o1.0..4> BTC: Bus Turnaround Cycles <1-16> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF1278, 0x00000002);    // STURN1
//     </h>

//     <h> Configure External Bus Behaviour for Static nCS2 Area
//       <h> Static Memory Configuration Register (SCONFIG2)
//         <i> Defines the configuration information for the static memory nCS2
//         <o1.20> WP: Write Protect
//         <o1.19> B: Read and Write Buffer Enable
//         <o1.8> EW: Extended Wait Enable
//         <o1.7> BLS: Byte Lane State
//                     <0=> For reads nBLE are HIGH, for writes nBLE are HIGH
//                     <1=> For reads nBLE are LOW, for writes nBLE are LOW
//         <o1.6> PC: Chip Select Polarity
//                     <0=> Active LOW chip select
//                     <1=> Active HIGH chip select
//         <o1.3> PM: Page Mode Enable
//         <o1.0..1> MW: Memory Width
//                     <0=> 8 bit
//                     <1=> 16 bit
//                     <2=> 32 bit
//       </h>
    _WDWORD(0xFFFF1260, 0x00000081);    // SCONFIG2

//       <h> Static Memory Write Enable Delay Register (SWAITWEN2)
//         <i> Selects the delay from nCS2 to write enable
//         <o.1..3> WAITWEN: Wait Write Enable <0-15>
//       </h>
    _WDWORD(0xFFFF1264, 0x00000002);    // SWAITWEN2

//       <h> Static Memory Output Enable Delay register (SWAITOEN2)
//         <i> Selects the delay from nCS2 or address change, whichever is later, to output enable
//         <o1.0..3> WAITOEN: Wait Output Enable <0-15>
//       </h>
    _WDWORD(0xFFFF1268, 0x00000002);    // SWAITOEN2
                                      
//       <h> Static Memory Read Delay Register (SWAITRD2)
//         <i> Selects the delay from nCS2 to a read access
//         <o1.0..4> WAITRD: Non-page Mode Read Wait States or Asynchronous Page Mode Read First Access Wait Atates <1-32> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF126C, 0x00000010);    // SWAITRD2

//       <h> Static Memory Page Mode Read Delay Register (SWAITPAGE2)
//         <i> Selects the delay for asynchronous page mode sequential accesses for nCS2
//         <o1.0..4> WAITPAGE: Asynchronous Page Mode Read After the First Read Wait States <1-32> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF1270, 0x00000002);    // SWAITPAGE2

//       <h> Static Memory Write Delay Register (SWAITWR2)
//         <i> Selects the delay from nCS2 to a write access
//         <o1.0..4> WAITWR: Write Wait States <0-31>
//       </h>
    _WDWORD(0xFFFF1274, 0x0000000E);    // SWAITWR2

//       <h> Static Memory Turn Round Delay Register (STURN2)
//         <i> Selects the number of bus turnaround cycles for nCS2
//         <o1.0..4> BTC: Bus Turnaround Cycles <1-16> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF1278, 0x00000002);    // STURN2
//     </h>

//     <h> Configure External Bus Behaviour for Static nCS3 Area
//       <h> Static Memory Configuration Register (SCONFIG3)
//         <i> Defines the configuration information for the static memory nCS3
//         <o1.20> WP: Write Protect
//         <o1.19> B: Read and Write Buffer Enable
//         <o1.8> EW: Extended Wait Enable
//         <o1.7> BLS: Byte Lane State
//                     <0=> For reads nBLE are HIGH, for writes nBLE are HIGH
//                     <1=> For reads nBLE are LOW, for writes nBLE are LOW
//         <o1.6> PC: Chip Select Polarity
//                     <0=> Active LOW chip select
//                     <1=> Active HIGH chip select
//         <o1.3> PM: Page Mode Enable
//         <o1.0..1> MW: Memory Width
//                     <0=> 8 bit
//                     <1=> 16 bit
//                     <2=> 32 bit
//       </h>
    _WDWORD(0xFFFF1260, 0x00000081);    // SCONFIG3

//       <h> Static Memory Write Enable Delay Register (SWAITWEN3)
//         <i> Selects the delay from nCS3 to write enable
//         <o.1..3> WAITWEN: Wait Write Enable <0-15>
//       </h>
    _WDWORD(0xFFFF1264, 0x00000002);    // SWAITWEN3

//       <h> Static Memory Output Enable Delay register (SWAITOEN3)
//         <i> Selects the delay from nCS3 or address change, whichever is later, to output enable
//         <o1.0..3> WAITOEN: Wait Output Enable <0-15>
//       </h>
    _WDWORD(0xFFFF1268, 0x00000002);    // SWAITOEN3
                                      
//       <h> Static Memory Read Delay Register (SWAITRD3)
//         <i> Selects the delay from nCS3 to a read access
//         <o1.0..4> WAITRD: Non-page Mode Read Wait States or Asynchronous Page Mode Read First Access Wait Atates <1-32> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF126C, 0x00000005);    // SWAITRD3

//       <h> Static Memory Page Mode Read Delay Register (SWAITPAGE3)
//         <i> Selects the delay for asynchronous page mode sequential accesses for nCS3
//         <o1.0..4> WAITPAGE: Asynchronous Page Mode Read After the First Read Wait States <1-32> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF1270, 0x00000002);    // SWAITPAGE3

//       <h> Static Memory Write Delay Register (SWAITWR3)
//         <i> Selects the delay from nCS3 to a write access
//         <o1.0..4> WAITWR: Write Wait States <0-31>
//       </h>
    _WDWORD(0xFFFF1274, 0x00000005);    // SWAITWR3

//       <h> Static Memory Turn Round Delay Register (STURN3)
//         <i> Selects the number of bus turnaround cycles for nCS3
//         <o1.0..4> BTC: Bus Turnaround Cycles <1-16> <#-1>
//           <i> The delay is in HCLK cycles
//       </h>
    _WDWORD(0xFFFF1278, 0x00000002);    // STURN3
//     </h>
//   </h>
// </h>
  _sleep_(1);


    // Dynamic Memory Interface Configuration (for SDRAM)
    _WDWORD(0xFFFF1028, 0x00000001);    // DYNRCON
    _WDWORD(0xFFFF1100, 0x00005480);    // DYNCFG0
    _WDWORD(0xFFFF1104, 0x00000203);    // DYNRASCAS0
    _WDWORD(0xFFFF1030, 0x00000001);    // PRECHARGE
    _WDWORD(0xFFFF1034, 0x00000003);    // DYNM2PRE
    _WDWORD(0xFFFF1038, 0x00000006);    // REFEXIT
    _WDWORD(0xFFFF103C, 0x00000006);    // DOACTIVE
    _WDWORD(0xFFFF1040, 0x00000006);    // DIACTIVE
    _WDWORD(0xFFFF1044, 0x00000002);    // DWRT
    _WDWORD(0xFFFF1048, 0x00000006);    // DYNACTCMD
    _WDWORD(0xFFFF104C, 0x00000006);    // DYNAUTO
    _WDWORD(0xFFFF1050, 0x00000006);    // DYNREFEXIT
    _WDWORD(0xFFFF1054, 0x00000002);    // DYNACTIVEAB
    _WDWORD(0xFFFF1058, 0x00000002);    // DYNAMICMRD
    _WDWORD(0xFFFF1020, 0x00000003);    // DYNMCTRL
    _sleep_(1);
    _WDWORD(0xFFFF1020, 0x00000183);    // DYNMCTRL
    _sleep_(1);
    _WDWORD(0xFFFF1020, 0x00000103);    // DYNMCTRL
    _WDWORD(0xFFFF1024, 0x00000000);    // DYNMREF
    _sleep_(1);
    _WDWORD(0xFFFF1024, 0x00000018);    // DYNMREF
    _WDWORD(0xFFFF1020, 0x00000083);    // DYNMCTRL
    _RDWORD(0x20011000);                // Set Mode
    _WDWORD(0xFFFF1100, 0x00085480);    // DYNCFG0
    _WDWORD(0xFFFF1104, 0x00000203);    // DYNRASCAS0
    _WDWORD(0xFFFF1020, 0x00000003);    // DYNMCTRL
    _WDWORD(0xFFFF1100, 0x00085480);    // DYNCFG0
    _sleep_(1);
  }
}
// </e>

// <o0.2> Enable Flash Programming
Setup |= 0x04;

// <e0.3> Download Program
Setup |= 0x00;

FUNC void Download (void) {
  if (Setup & (1 << 3)) {
//  <s0.80> Command for Loading
    exec("LOAD Ext_SDRAM\\Blinky.axf INCREMENTAL");
  }
}
// </e>

// <e0.4> Remap
Setup |= 0x00;

FUNC void Remap (void) {
  if (Setup & (1 << 4)) {
// <o1> Remap to address 0
//                     <0=> No remap
//                     <1=> External SDRAM
//                     <2=> Internal SRAM
//                     <3=> External SRAM0
    _WDWORD(0xFFFE2008, 0x00000001);
  }
}
// </e>

// <e0.5> Setup Program Counter to Entry Point
//   <o1> Program Entry Point <0x0-0xFFFFFFFF>
// </e>

// <e0.6> Execute Program untill Main Function
// </e>
Setup |= 0x00;
Entry  = 0x00000000;


Clock_Setup();
EMC_Setup();
EnableFlashProgramming();
Download();
Remap();
PC_Setup();
GoMain();
