/******************************************************************************/
/* Prg_Ext_NOR.ini: External NOR Programming Initialization File              */
/******************************************************************************/
// <<< Use Configuration Wizard in Context Menu >>>                           // 
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2005-2009 Keil Software. All rights reserved.                */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************************************************/


DEFINE CHAR Setup;
DEFINE INT  Entry;

// Memory mapped peripherals address definitions
DEFINE LONG SCU;
DEFINE LONG MC;
SCU    = 0x1803C000;
MC     = 0x18058000;

FUNC void Clock_Setup (void) {
  if (Setup & 0x01) {
    // Setup clock: XTAL             =  12.00 MHz 
    //              CPLL             = 133.00 MHz 
    //              UPLL             =  88.47 MHz 
    //              AHB Clock = CPLL = 133.00 MHz 
    LONG SCU_PLLPARAM_A, SCU_PLLPARAM_B, SCU_CHIPCFG_A, SCU_CLKCFG, SCU_CHIPCFG_C; 

    SCU_PLLPARAM_A  = SCU + 0x04;
    SCU_PLLPARAM_B  = SCU + 0x08;
    SCU_CHIPCFG_A   = SCU + 0x0C;
    SCU_CLKCFG      = SCU + 0x14;
    SCU_CHIPCFG_C   = SCU + 0x18;

    _WDWORD(SCU_CHIPCFG_C  , 0x00000000);   // Remap off
    if (_RDWORD(SCU_CHIPCFG_C) & 0x02) {    // If PLL used
      _WDWORD(SCU_CHIPCFG_C  , 0x00010001); // Disable PLL as system clock
    }
    _WDWORD(SCU_CHIPCFG_A  , 0x00032000);   // DCFG_MODE3, UCFG_MODE1
    _WDWORD(SCU_PLLPARAM_A , 0x0F0141A8);   // Setup CPLL and UPLL
    _WDWORD(SCU_PLLPARAM_B , 0x00001770);   // Set PLL lock period to 0.5 ms, CPU/AHB = 1/1
    _WDWORD(SCU_CLKCFG     , 0xFFFFFFFF);   // Enable all peripheral clocks
    _WDWORD(SCU_CHIPCFG_C  , 0xDEEDDEED);   // Enable PLL as system clock
    _sleep_ (10);
  }
}

FUNC void SDRAM_Setup (void) {
  if (Setup & 0x02) {
    LONG MCSDR_MODE, MCSDR_ADDMAP, MCSDR_ADDCFG, MCSDR_BASIC, MCSDR_T_REF, 
         MCSDR_T_RFC, MCSDR_T_MRD, MCSDR_T_RP, MCSDR_T_RCD; 

    MCSDR_MODE      = MC + 0x100;
    MCSDR_ADDMAP    = MC + 0x104;
    MCSDR_ADDCFG    = MC + 0x108;
    MCSDR_BASIC     = MC + 0x10C;
    MCSDR_T_REF     = MC + 0x110;
    MCSDR_T_RFC     = MC + 0x114;
    MCSDR_T_MRD     = MC + 0x118;
    MCSDR_T_RP      = MC + 0x120;
    MCSDR_T_RCD     = MC + 0x124;

    // Setup SDRAM Memory Controller, SDRAM connected to Module 0
    _WDWORD(MCSDR_MODE  , 0x00000030);      // Set SDRAM CAS to 3
    _WDWORD(MCSDR_ADDMAP, 0x000000FF);      // Size 512MB, all CS used
    _WDWORD(MCSDR_ADDCFG, 0x00002121);      // Row 13 bits, column 9 bits
    _WDWORD(MCSDR_BASIC , 0x0000000A);      // Data width 32 bits
    _WDWORD(MCSDR_T_REF , 0x0000040F);
    _WDWORD(MCSDR_T_RFC , 0x00000009);
    _WDWORD(MCSDR_T_MRD , 0x00000001);
    _WDWORD(MCSDR_T_RP  , 0x00000002);
    _WDWORD(MCSDR_T_RCD , 0x00000001);
  }
}

FUNC void NOR_Setup (void) {
  if (Setup & 0x04) {
    LONG MCST0_T_CEWD, MCST0_T_CE2WE, MCST0_T_WEWD, MCST0_T_WE2CE,  
         MCST0_T_CEWDR, MCST0_T_CE2RD, MCST0_T_RDWD, MCST0_T_RD2CE, MCST0_BASIC;  
    LONG MCST1_T_CEWD, MCST1_T_CE2WE, MCST1_T_WEWD, MCST1_T_WE2CE,  
         MCST1_T_CEWDR, MCST1_T_CE2RD, MCST1_T_RDWD, MCST1_T_RD2CE, MCST1_BASIC;  
    
    MCST0_T_CEWD    = MC + 0x200;
    MCST0_T_CE2WE   = MC + 0x204;
    MCST0_T_WEWD    = MC + 0x208;
    MCST0_T_WE2CE   = MC + 0x20C;
    MCST0_T_CEWDR   = MC + 0x210;
    MCST0_T_CE2RD   = MC + 0x214;
    MCST0_T_RDWD    = MC + 0x218;
    MCST0_T_RD2CE   = MC + 0x21C;
    MCST0_BASIC     = MC + 0x220;

    // Setup Static Memory 0 Controller
    _WDWORD(MCST0_T_CEWD , 0x00000006);
    _WDWORD(MCST0_T_CE2WE, 0x00000000);
    _WDWORD(MCST0_T_WEWD , 0x00000005);
    _WDWORD(MCST0_T_WE2CE, 0x00000000);
    _WDWORD(MCST0_T_CEWDR, 0x00000000);
    _WDWORD(MCST0_T_CE2RD, 0x00000006);
    _WDWORD(MCST0_T_RDWD , 0x0000000A);
    _WDWORD(MCST0_T_RD2CE, 0x00000000);
    _WDWORD(MCST0_BASIC  , 0x00000001);

    MCST1_T_CEWD    = MC + 0x300;
    MCST1_T_CE2WE   = MC + 0x304;
    MCST1_T_WEWD    = MC + 0x308;
    MCST1_T_WE2CE   = MC + 0x30C;
    MCST1_T_CEWDR   = MC + 0x310;
    MCST1_T_CE2RD   = MC + 0x314;
    MCST1_T_RDWD    = MC + 0x318;
    MCST1_T_RD2CE   = MC + 0x31C;
    MCST1_BASIC     = MC + 0x320;

    // Setup Static Memory 0 Controller
    _WDWORD(MCST1_T_CEWD , 0x00000006);
    _WDWORD(MCST1_T_CE2WE, 0x00000000);
    _WDWORD(MCST1_T_WEWD , 0x00000005);
    _WDWORD(MCST1_T_WE2CE, 0x00000000);
    _WDWORD(MCST1_T_CEWDR, 0x00000000);
    _WDWORD(MCST1_T_CE2RD, 0x00000006);
    _WDWORD(MCST1_T_RDWD , 0x0000000A);
    _WDWORD(MCST1_T_RD2CE, 0x00000000);
    _WDWORD(MCST1_BASIC  , 0x00000001);
  }
}

FUNC void PC_Setup (void) {
  if (Setup & 0x40) {
    PC = Entry;
  }
}

FUNC void GoMain (void) {
  if ((Setup & 0xA0) == 0xA0) {
    exec("g,main");
  }
}


// <o1.0> Clock Setup
// <o1.1> SDRAM Controller Setup
// <o1.2> NOR Controller Setup
// <e1.5> Download Program
FUNC void Download (void) {
  if (Setup & 0x20) {
//  <s0.80> Command for Loading
    exec("LOAD Ext_SDRAM\\Blinky.axf INCREMENTAL");
  }
}
// </e>
// <e0.6> Setup Program Counter to Entry Point
//   <o1> Program Entry Point <0x0-0xFFFFFFFF>
// </e>
// <e.7> Execute Program untill Main Function
// </e>
Setup = 0x07;
Entry = 0x80000000;


Clock_Setup();
SDRAM_Setup();
NOR_Setup();
Download();
PC_Setup();
GoMain();
